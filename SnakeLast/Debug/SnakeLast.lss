
AVRASM ver. 2.2.7  C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm Sun May 20 17:14:59 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(54): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(57): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Keyboard.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(58): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Move.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(59): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Display.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(60): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Rules.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(61): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\RandomGen.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(54): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(57): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Keyboard.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(58): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Move.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(59): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Display.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(60): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Rules.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(61): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\RandomGen.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Snake.asm
                                 ;
                                 ; Created: 4/22/2018 12:09:48 PM
                                 ; Author : Vador
                                 ;
                                 
                                 ; define registers:
                                 
                                 .def COUNTER_POS = R17
                                 .def RANDOM_POS = R18
                                 .def POS_Y = R19
                                 .def POS_X = R20
                                 .def V = R21 
                                 .def COUNTER_MOVE = R22
                                 .def LENGTH = R23
                                 .def GAME_STATE = R24 ; 0: game over, 1: pause, 2: playing
                                 .def SYMBOL = R25
                                 ; R26 -> R29 used as pointers X and Y
                                 
                                 ; define constants:
                                 ; timer counters
                                 .equ COUNTER_OFFSET = 206
                                 .equ COUNTER_OFFSET_MOVE_L = 0xE6
                                 .equ COUNTER_OFFSET_MOVE_H = 0xF9
                                 
                                 ; map size
                                 .equ X_MAX = 79
                                 .equ Y_MAX = 6
                                 
                                 ; initial length of snake
                                 .equ INIT_LENGTH = 3
                                 
                                 ; define head SRAM addresses
                                 .equ HEADXADDR = 0x0100
                                 .equ HEADYADDR = 0x0101
                                 
                                 ; define fruit SRAM addresses
                                 .equ FRUITXADDR = 0x0200
                                 .equ FRUITYADDR = 0x0201
                                 
                                 ; define past fruit SRAM addresses (for Random generator)
                                 .equ FRUITXADDR2 = 0x0202
                                 .equ FRUITYADDR2 = 0x0203
                                 
                                 
                                 ; begin program
                                 .org 0x0000
000000 c27d                      	rjmp init
                                 .org 0x001A
00001a c283                      	rjmp ISRmove
                                 
                                 ; include definition file of ATmega328P
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; include important functions
                                 .include "Keyboard.inc"
                                 
                                 ; Keyboard.inc
                                 ;
                                 ; Created: 5/19/2018 2:04:01 PM
                                 ; Author : Vador
                                 ;
                                 
                                 checkKeyboard:
                                 	; 4 steps keyboard check
                                 	; check row 3
00001b 985d                      	cbi PORTD,5
00001c 9b49                      	sbis PIND,1
00001d c00e                      	rjmp K3pressed
00001e 9a5d                      	sbi PORTD,5
                                 
                                 	; check row 4
00001f 985c                      	cbi PORTD,4
000020 9b48                      	sbis PIND,0
000021 c00e                      	rjmp KCpressed
000022 9b49                      	sbis PIND,1
000023 c00a                      	rjmp KBpressed
000024 9b4a                      	sbis PIND,2
000025 c004                      	rjmp K0pressed
000026 9b4b                      	sbis PIND,3
000027 c00a                      	rjmp KApressed
000028 9a5c                      	sbi PORTD,4
                                 
                                 end_keyboard:
000029 9508                      	ret
                                 
                                 K0pressed:
                                 	; set direction to left
00002a e058                      	ldi V, 0b0000_1000
00002b cffd                      	rjmp end_keyboard
                                 K3pressed:
                                 	; set direction to up
00002c e054                      	ldi V, 0b0000_0100
00002d cffb                      	rjmp end_keyboard
                                 KBpressed:
                                 	; set direction to down
00002e e052                      	ldi V, 0b0000_0010
00002f cff9                      	rjmp end_keyboard
                                 KCpressed:
                                 	; set direction to right
000030 e051                      	ldi V, 0b0000_0001
000031 cff7                      	rjmp end_keyboard
                                 
                                 KApressed:
                                 	; begin button
000032 d285                      	rcall initialConditions
                                 
000033 9120 0084                 	lds RANDOM_POS, TCNT1L
000035 d223                      	rcall randomXpos
000036 9320 0200                 	sts FRUITXADDR, RANDOM_POS
000038 9120 0085                 	lds RANDOM_POS, TCNT1H
00003a d223                      	rcall randomYpos
00003b 9320 0201                 	sts FRUITYADDR, RANDOM_POS
00003d cfeb                      	rjmp end_keyboard
                                 
                                 
                                 
                                 .include "Move.inc"
                                 
                                  * Move.inc
                                  *
                                  *  Created: 5/19/2018 2:04:01 PM
                                  *   Author: Vador
                                  */ 
                                 
                                  move:
00003e e0d1                      	ldi YH, HIGH(HEADXADDR)
00003f e0c0                      	ldi YL, LOW(HEADXADDR)
000040 937f                      	push LENGTH
000041 0f77                      	add LENGTH, LENGTH
000042 5072                      	subi LENGTH, 2
000043 0fc7                      	add YL, LENGTH
000044 917f                      	pop LENGTH
000045 2f67                      	mov COUNTER_MOVE, LENGTH
                                 	for_move:
000046 3061                      		cpi COUNTER_MOVE, 1
000047 f031                      		breq do_move
000048 913a                      		ld POS_Y, -Y
000049 933f                      		push POS_Y
00004a 914a                      		ld POS_X, -Y
00004b 934f                      		push POS_X
00004c 956a                      		dec COUNTER_MOVE
00004d cff8                      		rjmp for_move
                                 
                                 	do_move:
00004e 3051                      		cpi V, 0b0000_0001
00004f f039                      			breq move_right
000050 3058                      		cpi V, 0b0000_1000
000051 f039                      			breq move_left
000052 3052                      		cpi V, 0b0000_0010
000053 f049                      			breq move_down
000054 3054                      		cpi V, 0b0000_0100
000055 f029                      			breq move_up
                                 
000056 c008                      		rjmp end_move
                                 
                                 		move_right:
000057 d03f                      			rcall go_right
000058 c006                      			rjmp end_move
                                 		move_left:
000059 d031                      			rcall go_left
00005a c004                      			rjmp end_move
                                 		move_up:
00005b d011                      			rcall go_up
00005c c002                      			rjmp end_move
                                 		move_down:
00005d d01e                      			rcall go_down
00005e c000                      			rjmp end_move
                                 		end_move:
00005f e0d1                      			ldi YH, HIGH(HEADXADDR)
000060 e0c0                      			ldi YL, LOW(HEADXADDR)
000061 2f67                      			mov COUNTER_MOVE, LENGTH
                                 			for_end_move:
000062 3061                      				cpi COUNTER_MOVE, 1
000063 f031                      				breq do_end_move
000064 9349                      				st Y+, POS_X
000065 9339                      				st Y+, POS_Y
000066 914f                      				pop POS_X
000067 913f                      				pop POS_Y
000068 956a                      				dec COUNTER_MOVE
000069 cff8                      				rjmp for_end_move
                                 		do_end_move:
00006a 9349                      			st Y+, POS_X
00006b 8338                      			st Y, POS_Y
00006c 9508                      			ret
                                 
                                 
                                 go_up:
00006d 3030                      	cpi POS_Y, 0
00006e f009                      	breq boundary_up
00006f c009                      	rjmp do_go_up
                                 	boundary_up:
000070 3248                      		cpi POS_X, 40
000071 f00a                      		brmi up_from_top
000072 c003                      		rjmp up_from_bottom
                                 
                                 	up_from_top:
000073 e036                      		ldi POS_Y, 6
000074 5d48                      		subi POS_X, 216 ; -216 = +40 (offset to change top to down screen)
000075 c005                      		rjmp go_up_end
                                 
                                 	up_from_bottom:
000076 e036                      	 	ldi POS_Y, 6
000077 5248                      		subi POS_X, 40 ; sub offset to change down to top screen
000078 c002                      		rjmp go_up_end
                                 
                                 	do_go_up:
000079 953a                      		dec POS_Y
00007a c000                      		rjmp go_up_end
                                 	go_up_end:
00007b 9508                      		ret
                                 
                                 go_down:
00007c 3036                      	cpi POS_Y, 6
00007d f009                      	breq boundary_down
00007e c009                      	rjmp do_go_down
                                 
                                 	boundary_down:
00007f 3248                      		cpi POS_X, 40
000080 f00a                      		brmi down_from_top
000081 c003                      		rjmp down_from_bottom
                                 
                                 	down_from_top:
000082 e030                      		ldi POS_Y, 0
000083 5d48                      		subi POS_X, 216 ; -216=+40 (offset to change top to down screen)
000084 c005                      		rjmp go_down_end
                                 
                                 	down_from_bottom:
000085 e030                      	 	ldi POS_Y, 0
000086 5248                      		subi POS_X, 40 ; sub offset to change down to top screen
000087 c002                      		rjmp go_down_end
                                 
                                 	do_go_down:
000088 9533                      		inc POS_Y
000089 c000                      		rjmp go_down_end
                                 	go_down_end:
00008a 9508                      		ret
                                 
                                 go_left:
00008b 3040                      	cpi POS_X, 0
00008c f019                      	breq boudary_up_left
00008d 3248                      	cpi POS_X, 40
00008e f019                      	breq boudary_down_left
00008f c004                      	rjmp do_go_left
                                 
                                 	boudary_up_left:
000090 e247                      		ldi POS_X, 39
000091 c004                      		rjmp go_left_end
                                 
                                 	boudary_down_left:
000092 e44f                      		ldi POS_X, X_MAX
000093 c002                      		rjmp go_left_end	
                                 
                                 	do_go_left:
000094 954a                      		dec POS_X
000095 c000                      		rjmp go_left_end
                                 	go_left_end:
000096 9508                      		ret
                                 
                                 go_right:
000097 3247                      	cpi POS_X, 39
000098 f019                      	breq boudary_up_right
000099 344f                      	cpi POS_X, X_MAX
00009a f019                      	breq boudary_down_right
00009b c004                      	rjmp do_go_right
                                 
                                 	boudary_up_right:
00009c e040                      		ldi POS_X, 0
00009d cff8                      		rjmp go_left_end
                                 
                                 	boudary_down_right:
00009e e248                      		ldi POS_X, 40
00009f cff6                      		rjmp go_left_end	
                                 
                                 	do_go_right:
0000a0 9543                      		inc POS_X
0000a1 c000                      		rjmp go_right_end
                                 
                                 	go_right_end:
                                 .include "Display.inc"
0000a2 9508                      
                                  * Display.inc
                                  *
                                  *  Created: 5/19/2018 2:09:20 PM
                                  *   Author: Vador
                                  */ 
                                 
                                  display:
0000a3 e0b1                      	ldi XH, HIGH(HEADXADDR)
0000a4 e0a0                      	ldi XL, LOW(HEADXADDR)
                                 	; plot the snake
0000a5 2f17                      	mov COUNTER_POS, LENGTH
                                 	for_display:
0000a6 3010                      		cpi COUNTER_POS, 0
0000a7 f049                      		breq display_end
0000a8 931f                      		push COUNTER_POS ; also used in plot_posX,Y
0000a9 919d                      		ld SYMBOL, X+ ; symbol = posX
0000aa d00e                      		rcall plot_posX
0000ab 919d                      		ld SYMBOL, X+ ; symbol = posY
0000ac d017                      		rcall plot_posY
0000ad d02a                      		rcall enableLatch
0000ae 911f                      		pop COUNTER_POS ; recover from RAM
0000af 951a                      		dec COUNTER_POS
0000b0 cff5                      		rjmp for_display
                                 	display_end:
                                 		; plot the fruit and return
0000b1 9190 0200                 		lds SYMBOL, FRUITXADDR ; symbol = posX
0000b3 d005                      		rcall plot_posX
0000b4 9190 0201                 		lds SYMBOL, FRUITYADDR ; symbol = posY
0000b6 d00d                      		rcall plot_posY
0000b7 d020                      		rcall enableLatch
0000b8 9508                      		ret
                                 
                                 plot_posX:
0000b9 e41f                      	ldi COUNTER_POS, X_MAX
                                 	; to make 80 - POS, do the 3 following lines
                                 /*	subi POS, 80 ; X_MAX + 1
                                 	ldi R17, 0b1111_1111 ; xor with 1111_1111 reverse the bits
                                 	eor POS, R17 ; it is done to take into account the fact that the first bit written are the last in the screen*/
                                 	comparePosX:
0000ba 1791                      		cp SYMBOL, COUNTER_POS
0000bb f029                      		breq foundPosX
0000bc d013                      		rcall write_0
                                 	checkEndPlotX:
0000bd 3010                      		cpi COUNTER_POS, 0
0000be f021                      		breq endPlotX
0000bf 951a                      		dec COUNTER_POS
0000c0 cff9                      		rjmp comparePosX
                                 	foundPosX:
0000c1 d012                      		rcall write_1
0000c2 cffa                      		rjmp checkEndPlotX
                                 	endPlotX:
0000c3 9508                      		ret
                                 
                                 plot_posY:
0000c4 e016                      	ldi COUNTER_POS, Y_MAX
                                 /*	subi POS, 7 ; Y_MAX + 1
                                 	ldi R17, 0b1111_1111 ; xor with 1111_1111 reverse the bits
                                 	eor POS, R17 ; it is done to take into account the fact that the first bit written are the last in the screen*/
0000c5 d00a                      	rcall write_0 ; to complete the register of rows
                                 	comparePosY:
0000c6 1791                      		cp SYMBOL, COUNTER_POS
0000c7 f029                      		breq foundPosY
0000c8 d007                      		rcall write_0
                                 	checkEndPlotY:
0000c9 3010                      		cpi COUNTER_POS, 0
0000ca f021                      		breq endPlotY
0000cb 951a                      		dec COUNTER_POS
0000cc cff9                      		rjmp comparePosY
                                 	foundPosY:
0000cd d006                      		rcall write_1
0000ce cffa                      		rjmp checkEndPlotY
                                 	endPlotY:
0000cf 9508                      		ret
                                 
                                 
                                 write_0:
                                 	; will write a 0 on the shift register (8 bit register)
                                 	; to do that: 
                                 	; 1- generate your bit with PB3
                                 	; 2- generate a clock rising/falling edge with PB5
0000d0 982b                      	cbi PORTB,3
0000d1 9a2d                      	sbi PORTB,5
0000d2 982d                      	cbi PORTB,5
0000d3 9508                      	ret
                                 
                                 write_1:
                                 	; will write a 1 on the shift register (8 bit register)
                                 	; to do that: 
                                 	; 1- generate your bit with PB3
                                 	; 2- generate a clock rising/falling edge with PB5
0000d4 9a2b                      	sbi PORTB,3
0000d5 9a2d                      	sbi PORTB,5
0000d6 982d                      	cbi PORTB,5
0000d7 9508                      	ret
                                 
                                 enableLatch:
                                 	; will enable the output of the shift register
                                 	; by setting then clearing PB4
0000d8 9a2c                      	sbi PORTB,4
0000d9 d002                      	rcall wait
0000da 982c                      	cbi PORTB,4
0000db 9508                      	ret
                                 
                                 wait:
0000dc ec0e                      	ldi R16,COUNTER_OFFSET
0000dd bd06                      	out TCNT0,R16 ; set counter init
0000de 9aa8                      	sbi TIFR0, TOV0 ; set interrupt bit to 1
                                 	loop_wait:
0000df 9ba8                      		sbis TIFR0, TOV0
0000e0 cffe                      		rjmp loop_wait
0000e1 9508                      	ret
                                 
                                  displayScore:
0000e2 9508                      	ret
                                 
                                 displayGameOver:
                                 	; enable columns of row 1
0000e3 e090                      	ldi SYMBOL, 0b0000_0000
0000e4 d12c                      	rcall write_symbol
0000e5 e090                      	ldi SYMBOL, 0b0000_0000
0000e6 d12a                      	rcall write_symbol
0000e7 e19e                      	ldi SYMBOL, 0b0001_1110
0000e8 d128                      	rcall write_symbol
0000e9 e19f                      	ldi SYMBOL, 0b0001_1111
0000ea d126                      	rcall write_symbol
0000eb e191                      	ldi SYMBOL, 0b0001_0001
0000ec d124                      	rcall write_symbol
0000ed e09e                      	ldi SYMBOL, 0b0000_1110
0000ee d122                      	rcall write_symbol
0000ef e090                      	ldi SYMBOL, 0b0000_0000
0000f0 d120                      	rcall write_symbol
0000f1 e090                      	ldi SYMBOL, 0b0000_0000
0000f2 d11e                      	rcall write_symbol
0000f3 e090                      	ldi SYMBOL, 0b0000_0000
0000f4 d11c                      	rcall write_symbol
0000f5 e090                      	ldi SYMBOL, 0b0000_0000
0000f6 d11a                      	rcall write_symbol
0000f7 e19f                      	ldi SYMBOL, 0b0001_1111
0000f8 d118                      	rcall write_symbol
0000f9 e191                      	ldi SYMBOL, 0b0001_0001
0000fa d116                      	rcall write_symbol
0000fb e09e                      	ldi SYMBOL, 0b0000_1110
0000fc d114                      	rcall write_symbol
0000fd e19f                      	ldi SYMBOL, 0b0001_1111
0000fe d112                      	rcall write_symbol
0000ff e090                      	ldi SYMBOL, 0b0000_0000
000100 d110                      	rcall write_symbol
000101 e090                      	ldi SYMBOL, 0b0000_0000
000102 d10e                      	rcall write_symbol
                                 	; enable row 1
000103 d0ce                      	rcall enable_row_1
000104 dfd3                      	rcall enableLatch
                                 
                                 	; enable columns of row 2
000105 e090                      	ldi SYMBOL, 0b0000_0000
000106 d10a                      	rcall write_symbol
000107 e090                      	ldi SYMBOL, 0b0000_0000
000108 d108                      	rcall write_symbol
000109 e191                      	ldi SYMBOL, 0b0001_0001
00010a d106                      	rcall write_symbol
00010b e190                      	ldi SYMBOL, 0b0001_0000
00010c d104                      	rcall write_symbol
00010d e191                      	ldi SYMBOL, 0b0001_0001
00010e d102                      	rcall write_symbol
00010f e191                      	ldi SYMBOL, 0b0001_0001
000110 d100                      	rcall write_symbol
000111 e090                      	ldi SYMBOL, 0b0000_0000
000112 d0fe                      	rcall write_symbol
000113 e090                      	ldi SYMBOL, 0b0000_0000
000114 d0fc                      	rcall write_symbol
000115 e090                      	ldi SYMBOL, 0b0000_0000
000116 d0fa                      	rcall write_symbol
000117 e090                      	ldi SYMBOL, 0b0000_0000
000118 d0f8                      	rcall write_symbol
000119 e190                      	ldi SYMBOL, 0b0001_0000
00011a d0f6                      	rcall write_symbol
00011b e19b                      	ldi SYMBOL, 0b0001_1011
00011c d0f4                      	rcall write_symbol
00011d e191                      	ldi SYMBOL, 0b0001_0001
00011e d0f2                      	rcall write_symbol
00011f e190                      	ldi SYMBOL, 0b0001_0000
000120 d0f0                      	rcall write_symbol
000121 e090                      	ldi SYMBOL, 0b0000_0000
000122 d0ee                      	rcall write_symbol
000123 e090                      	ldi SYMBOL, 0b0000_0000
000124 d0ec                      	rcall write_symbol
                                 	; enable row 2
000125 d0b5                      	rcall enable_row_2
000126 dfb1                      	rcall enableLatch
                                 
                                 	; enable columns of row 3
000127 e090                      	ldi SYMBOL, 0b0000_0000
000128 d0e8                      	rcall write_symbol
000129 e090                      	ldi SYMBOL, 0b0000_0000
00012a d0e6                      	rcall write_symbol
00012b e191                      	ldi SYMBOL, 0b0001_0001
00012c d0e4                      	rcall write_symbol
00012d e190                      	ldi SYMBOL, 0b0001_0000
00012e d0e2                      	rcall write_symbol
00012f e191                      	ldi SYMBOL, 0b0001_0001
000130 d0e0                      	rcall write_symbol
000131 e191                      	ldi SYMBOL, 0b0001_0001
000132 d0de                      	rcall write_symbol
000133 e090                      	ldi SYMBOL, 0b0000_0000
000134 d0dc                      	rcall write_symbol
000135 e090                      	ldi SYMBOL, 0b0000_0000
000136 d0da                      	rcall write_symbol
000137 e090                      	ldi SYMBOL, 0b0000_0000
000138 d0d8                      	rcall write_symbol
000139 e090                      	ldi SYMBOL, 0b0000_0000
00013a d0d6                      	rcall write_symbol
00013b e190                      	ldi SYMBOL, 0b0001_0000
00013c d0d4                      	rcall write_symbol
00013d e195                      	ldi SYMBOL, 0b0001_0101
00013e d0d2                      	rcall write_symbol
00013f e191                      	ldi SYMBOL, 0b0001_0001
000140 d0d0                      	rcall write_symbol
000141 e190                      	ldi SYMBOL, 0b0001_0000
000142 d0ce                      	rcall write_symbol
000143 e090                      	ldi SYMBOL, 0b0000_0000
000144 d0cc                      	rcall write_symbol
000145 e090                      	ldi SYMBOL, 0b0000_0000
000146 d0ca                      	rcall write_symbol
                                 	; enable row 3
000147 d09c                      	rcall enable_row_3
000148 df8f                      	rcall enableLatch
                                 
                                 	; enable columns of row 4
000149 e090                      	ldi SYMBOL, 0b0000_0000
00014a d0c6                      	rcall write_symbol
00014b e090                      	ldi SYMBOL, 0b0000_0000
00014c d0c4                      	rcall write_symbol
00014d e19e                      	ldi SYMBOL, 0b0001_1110
00014e d0c2                      	rcall write_symbol
00014f e19f                      	ldi SYMBOL, 0b0001_1111
000150 d0c0                      	rcall write_symbol
000151 e191                      	ldi SYMBOL, 0b0001_0001
000152 d0be                      	rcall write_symbol
000153 e191                      	ldi SYMBOL, 0b0001_0001
000154 d0bc                      	rcall write_symbol
000155 e090                      	ldi SYMBOL, 0b0000_0000
000156 d0ba                      	rcall write_symbol
000157 e090                      	ldi SYMBOL, 0b0000_0000
000158 d0b8                      	rcall write_symbol
000159 e090                      	ldi SYMBOL, 0b0000_0000
00015a d0b6                      	rcall write_symbol
00015b e090                      	ldi SYMBOL, 0b0000_0000
00015c d0b4                      	rcall write_symbol
00015d e19f                      	ldi SYMBOL, 0b0001_1111
00015e d0b2                      	rcall write_symbol
00015f e191                      	ldi SYMBOL, 0b0001_0001
000160 d0b0                      	rcall write_symbol
000161 e19f                      	ldi SYMBOL, 0b0001_1111
000162 d0ae                      	rcall write_symbol
000163 e193                      	ldi SYMBOL, 0b0001_0011
000164 d0ac                      	rcall write_symbol
000165 e090                      	ldi SYMBOL, 0b0000_0000
000166 d0aa                      	rcall write_symbol
000167 e090                      	ldi SYMBOL, 0b0000_0000
000168 d0a8                      	rcall write_symbol
                                 	; enable row 4
000169 d083                      	rcall enable_row_4
00016a df6d                      	rcall enableLatch
                                 
                                 	; enable columns of row 5
00016b e090                      	ldi SYMBOL, 0b0000_0000
00016c d0a4                      	rcall write_symbol
00016d e090                      	ldi SYMBOL, 0b0000_0000
00016e d0a2                      	rcall write_symbol
00016f e194                      	ldi SYMBOL, 0b0001_0100
000170 d0a0                      	rcall write_symbol
000171 e190                      	ldi SYMBOL, 0b0001_0000
000172 d09e                      	rcall write_symbol
000173 e191                      	ldi SYMBOL, 0b0001_0001
000174 d09c                      	rcall write_symbol
000175 e191                      	ldi SYMBOL, 0b0001_0001
000176 d09a                      	rcall write_symbol
000177 e090                      	ldi SYMBOL, 0b0000_0000
000178 d098                      	rcall write_symbol
000179 e090                      	ldi SYMBOL, 0b0000_0000
00017a d096                      	rcall write_symbol
00017b e090                      	ldi SYMBOL, 0b0000_0000
00017c d094                      	rcall write_symbol
00017d e090                      	ldi SYMBOL, 0b0000_0000
00017e d092                      	rcall write_symbol
00017f e190                      	ldi SYMBOL, 0b0001_0000
000180 d090                      	rcall write_symbol
000181 e191                      	ldi SYMBOL, 0b0001_0001
000182 d08e                      	rcall write_symbol
000183 e191                      	ldi SYMBOL, 0b0001_0001
000184 d08c                      	rcall write_symbol
000185 e191                      	ldi SYMBOL, 0b0001_0001
000186 d08a                      	rcall write_symbol
000187 e090                      	ldi SYMBOL, 0b0000_0000
000188 d088                      	rcall write_symbol
000189 e090                      	ldi SYMBOL, 0b0000_0000
00018a d086                      	rcall write_symbol
                                 	; enable row 5
00018b d06a                      	rcall enable_row_5
00018c df4b                      	rcall enableLatch
                                 
                                 	; enable columns of row 6
00018d e090                      	ldi SYMBOL, 0b0000_0000
00018e d082                      	rcall write_symbol
00018f e090                      	ldi SYMBOL, 0b0000_0000
000190 d080                      	rcall write_symbol
000191 e192                      	ldi SYMBOL, 0b0001_0010
000192 d07e                      	rcall write_symbol
000193 e190                      	ldi SYMBOL, 0b0001_0000
000194 d07c                      	rcall write_symbol
000195 e09a                      	ldi SYMBOL, 0b0000_1010
000196 d07a                      	rcall write_symbol
000197 e191                      	ldi SYMBOL, 0b0001_0001
000198 d078                      	rcall write_symbol
000199 e090                      	ldi SYMBOL, 0b0000_0000
00019a d076                      	rcall write_symbol
00019b e090                      	ldi SYMBOL, 0b0000_0000
00019c d074                      	rcall write_symbol
00019d e090                      	ldi SYMBOL, 0b0000_0000
00019e d072                      	rcall write_symbol
00019f e090                      	ldi SYMBOL, 0b0000_0000
0001a0 d070                      	rcall write_symbol
0001a1 e190                      	ldi SYMBOL, 0b0001_0000
0001a2 d06e                      	rcall write_symbol
0001a3 e191                      	ldi SYMBOL, 0b0001_0001
0001a4 d06c                      	rcall write_symbol
0001a5 e191                      	ldi SYMBOL, 0b0001_0001
0001a6 d06a                      	rcall write_symbol
0001a7 e191                      	ldi SYMBOL, 0b0001_0001
0001a8 d068                      	rcall write_symbol
0001a9 e090                      	ldi SYMBOL, 0b0000_0000
0001aa d066                      	rcall write_symbol
0001ab e090                      	ldi SYMBOL, 0b0000_0000
0001ac d064                      	rcall write_symbol
                                 	; enable row 6
0001ad d051                      	rcall enable_row_6
0001ae df29                      	rcall enableLatch
                                 
                                 	; enable columns of row 7
0001af e090                      	ldi SYMBOL, 0b0000_0000
0001b0 d060                      	rcall write_symbol
0001b1 e090                      	ldi SYMBOL, 0b0000_0000
0001b2 d05e                      	rcall write_symbol
0001b3 e191                      	ldi SYMBOL, 0b0001_0001
0001b4 d05c                      	rcall write_symbol
0001b5 e19f                      	ldi SYMBOL, 0b0001_1111
0001b6 d05a                      	rcall write_symbol
0001b7 e094                      	ldi SYMBOL, 0b0000_0100
0001b8 d058                      	rcall write_symbol
0001b9 e09e                      	ldi SYMBOL, 0b0000_1110
0001ba d056                      	rcall write_symbol
0001bb e090                      	ldi SYMBOL, 0b0000_0000
0001bc d054                      	rcall write_symbol
0001bd e090                      	ldi SYMBOL, 0b0000_0000
0001be d052                      	rcall write_symbol
0001bf e090                      	ldi SYMBOL, 0b0000_0000
0001c0 d050                      	rcall write_symbol
0001c1 e090                      	ldi SYMBOL, 0b0000_0000
0001c2 d04e                      	rcall write_symbol
0001c3 e19f                      	ldi SYMBOL, 0b0001_1111
0001c4 d04c                      	rcall write_symbol
0001c5 e191                      	ldi SYMBOL, 0b0001_0001
0001c6 d04a                      	rcall write_symbol
0001c7 e191                      	ldi SYMBOL, 0b0001_0001
0001c8 d048                      	rcall write_symbol
0001c9 e19f                      	ldi SYMBOL, 0b0001_1111
0001ca d046                      	rcall write_symbol
0001cb e090                      	ldi SYMBOL, 0b0000_0000
0001cc d044                      	rcall write_symbol
0001cd e090                      	ldi SYMBOL, 0b0000_0000
0001ce d042                      	rcall write_symbol
                                 	; enable row 7
0001cf d038                      	rcall enable_row_7
0001d0 df07                      	rcall enableLatch
0001d1 9508                      	ret
                                 
                                 enable_row_1:
0001d2 defd                      	rcall write_0
0001d3 defc                      	rcall write_0
0001d4 defb                      	rcall write_0
0001d5 defa                      	rcall write_0
0001d6 def9                      	rcall write_0
0001d7 def8                      	rcall write_0
0001d8 def7                      	rcall write_0
0001d9 defa                      	rcall write_1
0001da 9508                      	ret
                                 
                                 enable_row_2:
0001db def4                      	rcall write_0
0001dc def3                      	rcall write_0
0001dd def2                      	rcall write_0
0001de def1                      	rcall write_0
0001df def0                      	rcall write_0
0001e0 deef                      	rcall write_0
0001e1 def2                      	rcall write_1
0001e2 deed                      	rcall write_0
0001e3 9508                      	ret
                                 
                                 enable_row_3:
0001e4 deeb                      	rcall write_0
0001e5 deea                      	rcall write_0
0001e6 dee9                      	rcall write_0
0001e7 dee8                      	rcall write_0
0001e8 dee7                      	rcall write_0
0001e9 deea                      	rcall write_1
0001ea dee5                      	rcall write_0
0001eb dee4                      	rcall write_0
0001ec 9508                      	ret
                                 
                                 enable_row_4:
0001ed dee2                      	rcall write_0
0001ee dee1                      	rcall write_0
0001ef dee0                      	rcall write_0
0001f0 dedf                      	rcall write_0
0001f1 dee2                      	rcall write_1
0001f2 dedd                      	rcall write_0
0001f3 dedc                      	rcall write_0
0001f4 dedb                      	rcall write_0
0001f5 9508                      	ret
                                 
                                 enable_row_5:
0001f6 ded9                      	rcall write_0
0001f7 ded8                      	rcall write_0
0001f8 ded7                      	rcall write_0
0001f9 deda                      	rcall write_1
0001fa ded5                      	rcall write_0
0001fb ded4                      	rcall write_0
0001fc ded3                      	rcall write_0
0001fd ded2                      	rcall write_0
0001fe 9508                      	ret
                                 
                                 enable_row_6:
0001ff ded0                      	rcall write_0
000200 decf                      	rcall write_0
000201 ded2                      	rcall write_1
000202 decd                      	rcall write_0
000203 decc                      	rcall write_0
000204 decb                      	rcall write_0
000205 deca                      	rcall write_0
000206 dec9                      	rcall write_0
000207 9508                      	ret
                                 	
                                 enable_row_7:
000208 dec7                      	rcall write_0
000209 deca                      	rcall write_1
00020a dec5                      	rcall write_0
00020b dec4                      	rcall write_0
00020c dec3                      	rcall write_0
00020d dec2                      	rcall write_0
00020e dec1                      	rcall write_0
00020f dec0                      	rcall write_0
000210 9508                      	ret
                                 
                                 ; all print functions will display a specific character 
                                 ; on one single cell of the matrix led (cell = 7 rows x 5 cols)
                                 
                                 write_symbol:
                                 	; load the value on register SYMBOL and convert it on led symbol
                                 	; ex : if SYMBOL = 0b01000 -> turn on the second led of selected cell 
                                 	symb0:
000211 ff90                      		sbrs SYMBOL,0 ; skip if bit set
000212 c00e                      		rjmp symb0_is_0
                                 		symb0_is_1:
000213 dec0                      			rcall write_1
                                 	symb1:
000214 ff91                      		sbrs SYMBOL,1 ; skip if bit set
000215 c00d                      		rjmp symb1_is_0
                                 		symb1_is_1:
000216 debd                      			rcall write_1
                                 	symb2:
000217 ff92                      		sbrs SYMBOL,2 ; skip if bit set
000218 c00c                      		rjmp symb2_is_0
                                 		symb2_is_1:
000219 deba                      			rcall write_1
                                 	symb3:
00021a ff93                      		sbrs SYMBOL,3 ; skip if bit set
00021b c00b                      		rjmp symb3_is_0
                                 		symb3_is_1:
00021c deb7                      			rcall write_1
                                 	symb4:
00021d ff94                      		sbrs SYMBOL,4 ; skip if bit set
00021e c00a                      		rjmp symb4_is_0
                                 		symb4_is_1:
00021f deb4                      			rcall write_1
000220 c00a                      			rjmp symb_ended
                                 
                                 	symb0_is_0:
000221 deae                      		rcall write_0
000222 cff1                      		rjmp symb1
                                 
                                 	symb1_is_0:
000223 deac                      		rcall write_0
000224 cff2                      		rjmp symb2
                                 
                                 	symb2_is_0:
000225 deaa                      		rcall write_0
000226 cff3                      		rjmp symb3
                                 
                                 	symb3_is_0:
000227 dea8                      		rcall write_0
000228 cff4                      		rjmp symb4
                                 
                                 	symb4_is_0:
000229 dea6                      		rcall write_0
00022a c000                      		rjmp symb_ended
                                 	
                                 	symb_ended:
                                 .include "Rules.inc"
00022b 9508                      
                                  * Rules.inc
                                  *
                                  *  Created: 5/19/2018 2:11:17 PM
                                  *   Author: Vador
                                  */ 
                                 
                                 checkRules:
00022c d002                      	rcall deathRules
00022d d019                      	rcall eatRules
00022e 9508                      	ret
                                 
                                 deathRules:
                                 	; here POS_X and POS_Y are just registers with different meaning
00022f e0d1                      	ldi YH, HIGH(HEADYADDR)
000230 e0c1                      	ldi YL, LOW(HEADYADDR)
000231 95c3                      	inc YL ; to jump on body address
000232 2f67                      	mov COUNTER_MOVE, LENGTH
                                 	for_death:
000233 9140 0100                 		lds POS_X, HEADXADDR
000235 3061                      		cpi COUNTER_MOVE, 1
000236 f079                      		breq death_ended
000237 9139                      		ld POS_Y, Y+ ; POS_Y contains the X pos of next point
000238 1743                      		cp POS_X, POS_Y
000239 f019                      		breq collision_x
00023a 95c3                      		inc YL ; to check next X
00023b 956a                      		dec COUNTER_MOVE
00023c cff6                      		rjmp for_death
                                 
                                 		collision_x:
                                 			; check for xy collision
00023d 9140 0101                 			lds POS_X, HEADYADDR
00023f 9139                      			ld POS_Y, Y+ ; POS_Y contains the Y pos of body point
000240 1743                      			cp POS_X, POS_Y
000241 f011                      			breq on_death
000242 956a                      			dec COUNTER_MOVE
000243 cfef                      			rjmp for_death
                                 
                                 		on_death:
000244 e080                      			ldi GAME_STATE, 0 ; game over
000245 c000                      			rjmp death_ended
                                 
                                 	death_ended:
000246 9508                      	ret
                                 
                                 
                                 eatRules:
                                 	; here POS_X and POS_Y are just registers with different meaning
000247 9140 0100                 	lds POS_X, HEADXADDR
000249 9130 0200                 	lds POS_Y, FRUITXADDR
                                 	; check if matching in x positions
00024b 1743                      	cp POS_X, POS_Y
00024c f009                      	breq match_pos_x
00024d c00a                      	rjmp eat_ended
                                 
                                 	match_pos_x:
                                 		; check if matching in y positions
00024e 9140 0101                 		lds POS_X, HEADYADDR
000250 9130 0201                 		lds POS_Y, FRUITYADDR
000252 1743                      		cp POS_X, POS_Y
000253 f009                      		breq match_pos_xy
000254 c003                      		rjmp eat_ended
                                 
                                 	match_pos_xy:
                                 		; if both x and y pos matched
000255 d00d                      		rcall nextRandomPos
000256 9573                      		inc LENGTH
000257 c000                      		rjmp eat_ended
                                 
                                 	eat_ended:
                                 .include "RandomGen.inc"
000258 9508                      
                                  * RandomGen.inc
                                  *
                                  *  Created: 5/19/2018 2:12:22 PM
                                  *   Author: Vador
                                  */ 
                                 
                                 randomXpos:
                                 	; performs a modulo 80 of the random register
000259 3520                      	cpi RANDOM_POS, 80
00025a f010                      	brlo randXend
00025b 5520                      	subi RANDOM_POS, 80
00025c cffc                      	rjmp randomXpos
                                 	randXend:
00025d 9508                      		ret
                                 
                                 randomYpos:
                                 	; performs a modulo 7 of the random register
00025e 3027                      	cpi RANDOM_POS, 7
00025f f010                      	brlo randYend
000260 5027                      	subi RANDOM_POS, 7
000261 cffc                      	rjmp randomYpos
                                 	randYend:
000262 9508                      		ret
                                 
                                 nextRandomPos:
                                 	; pseudo random number generator using Fibonacci
                                 	; random x
000263 9140 0200                 	lds POS_X, FRUITXADDR
000265 9130 0202                 	lds POS_Y, FRUITXADDR2
000267 934f                      	push POS_X
000268 0f43                      	add POS_X, POS_Y
000269 2f24                      	mov RANDOM_POS, POS_X
00026a 914f                      	pop POS_X
00026b dfed                      	rcall randomXpos
00026c 9320 0200                 	sts FRUITXADDR, RANDOM_POS
00026e 9340 0202                 	sts FRUITXADDR2, POS_X
                                 	
                                 	; random y
000270 9130 0201                 	lds POS_Y, FRUITYADDR
000272 9140 0203                 	lds POS_X, FRUITYADDR2
000274 933f                      	push POS_Y
000275 0f34                      	add POS_Y, POS_X
000276 2f23                      	mov RANDOM_POS, POS_Y
000277 913f                      	pop POS_Y
000278 dfe5                      	rcall randomYpos
000279 9320 0201                 	sts FRUITYADDR, RANDOM_POS
00027b 9330 0203                 	sts FRUITYADDR2, POS_Y
00027d 9508                      
                                 init:
                                 	; config pins
00027e d02c                      	rcall configDispPin
00027f d026                      	rcall configRowKb
000280 d031                      	rcall configDebugLed
                                 	
                                 	; set all Snake initial conditions 
000281 d036                      	rcall initialConditions
                                 
                                 	; config display timer 
000282 ec0e                      	ldi R16,COUNTER_OFFSET 
000283 bd06                      	out TCNT0,R16 ; set counter init
000284 e003                      	ldi R16,0b0000_0011 ; set prescaler to 64 (COUNTER_OFFSET = 206 -> f = 5kHz)
000285 bd05                      	out TCCR0B,R16 ; timer is configured with prescaler 
                                 	;(timer begins)
                                 
                                 	; config ISR timer for periodic motion
000286 9478                      	sei ; set the global interrupt flag
000287 e001                      	ldi R16,0b0000_0001 ; register for ISR config
000288 9300 006f                 	sts TIMSK1, R16 ; enable ISR for timer 1
00028a ef09                      	ldi R16, COUNTER_OFFSET_MOVE_H
00028b 9300 0085                 	sts TCNT1H,R16
00028d ee06                      	ldi R16, COUNTER_OFFSET_MOVE_L
00028e 9300 0084                 	sts TCNT1L,R16 ; set counter init
000290 e005                      	ldi R16,0b0000_0101 ; set prescaler to 1024
000291 9300 0081                 	sts TCCR1B,R16 ; timer is configured with prescaler 
                                 	;(timer begins)
                                 
000293 dd9e                      	rcall KApressed ; automatically push the key A to begin the game 
000294 c000                      	rjmp main
                                 
                                 main:
000295 dd85                      	rcall checkKeyboard
000296 3080                      	cpi GAME_STATE, 0
000297 f019                      	breq game_over
                                 	play:
000298 df93                      		rcall checkRules
                                 		;rcall move ;in ISR
000299 de09                      		rcall display
00029a cffa                      		rjmp main
                                 
                                 	game_over:
00029b de47                      		rcall displayGameOver
00029c cff8                      		rjmp main
00029d cff7                      	rjmp main
                                 
                                 
                                 ISRmove:
                                 	;cbi PORTC,2 ; switch led 2
00029e dd9f                      	rcall move
00029f ef09                      	ldi R16, COUNTER_OFFSET_MOVE_H
0002a0 9300 0085                 	sts TCNT1H,R16
0002a2 ee06                      	ldi R16, COUNTER_OFFSET_MOVE_L
0002a3 9300 0084                 	sts TCNT1L,R16
0002a5 9518                      	reti
                                 
                                 
                                 configRowKb:
0002a6 ef00                      	ldi R16, 0b1111_0000 ; 4 row output mode, 4 col input mode
0002a7 b90a                      	out DDRD, R16
0002a8 ef0f                      	ldi R16, 0b1111_1111 ; rows -> low, cols -> enable pull up resistors
0002a9 b90b                      	out PORTD, R16
0002aa 9508                      	ret
                                 
                                 configDispPin:
0002ab 9a23                      	sbi DDRB,3
0002ac 982b                      	cbi PORTB,3
0002ad 9a24                      	sbi DDRB,4
0002ae 982c                      	cbi PORTB,4
0002af 9a25                      	sbi DDRB,5
0002b0 982d                      	cbi PORTB,5
0002b1 9508                      	ret
                                 
                                 configDebugLed:
0002b2 9a21                      	sbi DDRB,1 ; buzzer configured as output
0002b3 9a3a                      	sbi DDRC,2
0002b4 9a3b                      	sbi DDRC,3
0002b5 9a42                      	sbi PORTC,2
0002b6 9a43                      	sbi PORTC,3
0002b7 9508                      	ret
                                 
                                 initialConditions:
                                 	; initial game state
0002b8 e082                      	ldi GAME_STATE, 2 ; play 
                                 	; initial length
0002b9 e073                      	ldi LENGTH, INIT_LENGTH
                                 
                                 	; head position initial
0002ba e344                      	ldi POS_X, 52
0002bb e032                      	ldi POS_Y, 2
0002bc 9340 0100                 	sts HEADXADDR, POS_X 
0002be 9330 0101                 	sts HEADYADDR, POS_Y
                                 
                                 	; head position initial
0002c0 e343                      	ldi POS_X, 51
0002c1 e032                      	ldi POS_Y, 2
0002c2 9340 0102                 	sts 0x0102, POS_X
0002c4 9330 0103                 	sts 0x0103, POS_Y
                                 
                                 	; head position initial
0002c6 e342                      	ldi POS_X, 50
0002c7 e032                      	ldi POS_Y, 2
0002c8 9340 0104                 	sts 0x0104, POS_X
0002ca 9330 0105                 	sts 0x0105, POS_Y
                                 
                                 	; fruit position initial
0002cc e14e                      	ldi POS_X, 30
0002cd e032                      	ldi POS_Y, 2
0002ce 9340 0202                 	sts FRUITXADDR2, POS_X
0002d0 9330 0203                 	sts FRUITYADDR2, POS_Y
                                 
                                 	; initial direction -> none
0002d2 e051                      	ldi V, 0b0000_0001


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   2 y  :   8 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  22 r17:  13 r18:  12 r19:  37 r20:  45 
r21:   9 r22:  10 r23:  12 r24:   3 r25: 123 r26:   1 r27:   1 r28:   6 
r29:   3 r30:   0 r31:   0 
Registers used: 16 out of 35 (45.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   4 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  23 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   2 
brne  :   0 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   9 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   0 
cpi   :  21 cpse  :   0 dec   :   9 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   5 jmp   :   0 
ld    :   6 ldd   :   0 ldi   : 157 lds   :  14 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   6 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   5 pop   :   6 
push  :   6 rcall : 226 ret   :  33 reti  :   1 rjmp  :  66 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  15 sbic  :   0 sbis  :   6 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :  20 
sub   :   0 subi  :   7 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 27 out of 113 (23.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005a8   1398      0   1398   32768   4.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings

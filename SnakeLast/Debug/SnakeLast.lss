
AVRASM ver. 2.2.7  C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm Sat May 19 17:42:49 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(54): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(57): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Keyboard.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(58): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Move.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(59): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Display.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(60): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Rules.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(61): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\RandomGen.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(54): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(57): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Keyboard.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(58): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Move.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(59): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Display.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(60): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\Rules.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\main.asm(61): Including file 'C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\SnakeLast\RandomGen.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Snake.asm
                                 ;
                                 ; Created: 4/22/2018 12:09:48 PM
                                 ; Author : Vador
                                 ;
                                 
                                 ; define registers:
                                 
                                 .def COUNTER_POS = R17
                                 .def RANDOM_POS = R18
                                 .def POS_Y = R19
                                 .def POS_X = R20
                                 .def V = R21 
                                 .def COUNTER_MOVE = R22
                                 .def LENGTH = R23
                                 .def GAME_STATE = R24 ; 0: game over, 1: pause, 2: playing
                                 .def SYMBOL = R25
                                 ; R26 -> R29 used as pointers X and Y
                                 
                                 ; define constants:
                                 ; timer counters
                                 .equ COUNTER_OFFSET = 131
                                 .equ COUNTER_OFFSET_MOVE_L = 0xE6
                                 .equ COUNTER_OFFSET_MOVE_H = 0xF9
                                 
                                 ; map size
                                 .equ X_MAX = 79
                                 .equ Y_MAX = 6
                                 
                                 ; initial length of snake
                                 .equ INIT_LENGTH = 3
                                 
                                 ; define head SRAM addresses
                                 .equ HEADXADDR = 0x0100
                                 .equ HEADYADDR = 0x0101
                                 
                                 ; define fruit SRAM addresses
                                 .equ FRUITXADDR = 0x0200
                                 .equ FRUITYADDR = 0x0201
                                 
                                 ; define past fruit SRAM addresses (for Random generator)
                                 .equ FRUITXADDR2 = 0x0202
                                 .equ FRUITYADDR2 = 0x0203
                                 
                                 
                                 ; begin program
                                 .org 0x0000
000000 c288                      	rjmp init
                                 .org 0x001A
00001a c28d                      	rjmp ISRmove
                                 
                                 ; include definition file of ATmega328P
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; include important functions
                                 .include "Keyboard.inc"
                                 
                                 ; Keyboard.inc
                                 ;
                                 ; Created: 5/19/2018 2:04:01 PM
                                 ; Author : Vador
                                 ;
                                 
                                 checkKeyboard:
                                 	; 4 steps keyboard check
                                 	; check row 3
00001b 9a5e                      	sbi PORTD,6
00001c 985d                      	cbi PORTD,5
00001d 9a5f                      	sbi PORTD,7
00001e 9a5c                      	sbi PORTD,4
00001f 0000                      	nop
                                 
000020 9b49                      	sbis PIND,1
000021 c013                      	rjmp K3pressed
000022 9b4b                      	sbis PIND,3
000023 c01a                      	rjmp K1pressed
                                 
                                 	; check row 4
000024 985c                      	cbi PORTD,4
000025 9a5d                      	sbi PORTD,5
000026 9a5e                      	sbi PORTD,6
000027 9a5f                      	sbi PORTD,7
000028 0000                      	nop
                                 
000029 9b48                      	sbis PIND,0
00002a c010                      	rjmp KCpressed
00002b 9b49                      	sbis PIND,1
00002c c00b                      	rjmp KBpressed
00002d 9b4a                      	sbis PIND,2
00002e c003                      	rjmp K0pressed
00002f 9b4b                      	sbis PIND,3
000030 c00e                      	rjmp KApressed
                                 
                                 end_keyboard:
000031 9508                      	ret
                                 
                                 K0pressed:
                                 	; set direction to left
000032 e058                      	ldi V, 0b0000_1000
000033 9843                      	cbi PORTC,3
000034 cffc                      	rjmp end_keyboard
                                 K3pressed:
                                 	; set direction to up
000035 e054                      	ldi V, 0b0000_0100
000036 9843                      	cbi PORTC,3
000037 cff9                      	rjmp end_keyboard
                                 KBpressed:
                                 	; set direction to down
000038 e052                      	ldi V, 0b0000_0010
000039 9843                      	cbi PORTC,3
00003a cff6                      	rjmp end_keyboard
                                 KCpressed:
                                 	; set direction to right
00003b e051                      	ldi V, 0b0000_0001
00003c 9843                      	cbi PORTC,3
00003d cff3                      	rjmp end_keyboard
                                 
                                 K1pressed:
00003e cff2                      	rjmp end_keyboard
                                 
                                 KApressed:
                                 	; begin button
00003f 9120 0084                 	lds RANDOM_POS, TCNT1L
000041 d222                      	rcall randomXpos
000042 9320 0200                 	sts FRUITXADDR, RANDOM_POS
000044 9120 0085                 	lds RANDOM_POS, TCNT1H
000046 d222                      	rcall randomYpos
000047 9320 0201                 	sts FRUITYADDR, RANDOM_POS
                                 
000049 d278                      	rcall initialConditions
00004a cfe6                      	rjmp end_keyboard
                                 
                                 
                                 
                                 .include "Move.inc"
                                 
                                  * Move.inc
                                  *
                                  *  Created: 5/19/2018 2:04:01 PM
                                  *   Author: Vador
                                  */ 
                                 
                                  move:
00004b e0d1                      	ldi YH, HIGH(HEADXADDR)
00004c e0c0                      	ldi YL, LOW(HEADXADDR)
00004d 937f                      	push LENGTH
00004e 0f77                      	add LENGTH, LENGTH
00004f 5072                      	subi LENGTH, 2
000050 0fc7                      	add YL, LENGTH
000051 917f                      	pop LENGTH
000052 2f67                      	mov COUNTER_MOVE, LENGTH
                                 	for_move:
000053 3061                      		cpi COUNTER_MOVE, 1
000054 f031                      		breq do_move
000055 913a                      		ld POS_Y, -Y
000056 933f                      		push POS_Y
000057 914a                      		ld POS_X, -Y
000058 934f                      		push POS_X
000059 956a                      		dec COUNTER_MOVE
00005a cff8                      		rjmp for_move
                                 
                                 	do_move:
00005b 3051                      		cpi V, 0b0000_0001
00005c f039                      			breq move_right
00005d 3058                      		cpi V, 0b0000_1000
00005e f039                      			breq move_left
00005f 3052                      		cpi V, 0b0000_0010
000060 f049                      			breq move_down
000061 3054                      		cpi V, 0b0000_0100
000062 f029                      			breq move_up
                                 
000063 c008                      		rjmp end_move
                                 
                                 		move_right:
000064 d03f                      			rcall go_right
000065 c006                      			rjmp end_move
                                 		move_left:
000066 d031                      			rcall go_left
000067 c004                      			rjmp end_move
                                 		move_up:
000068 d011                      			rcall go_up
000069 c002                      			rjmp end_move
                                 		move_down:
00006a d01e                      			rcall go_down
00006b c000                      			rjmp end_move
                                 		end_move:
00006c e0d1                      			ldi YH, HIGH(HEADXADDR)
00006d e0c0                      			ldi YL, LOW(HEADXADDR)
00006e 2f67                      			mov COUNTER_MOVE, LENGTH
                                 			for_end_move:
00006f 3061                      				cpi COUNTER_MOVE, 1
000070 f031                      				breq do_end_move
000071 9349                      				st Y+, POS_X
000072 9339                      				st Y+, POS_Y
000073 914f                      				pop POS_X
000074 913f                      				pop POS_Y
000075 956a                      				dec COUNTER_MOVE
000076 cff8                      				rjmp for_end_move
                                 		do_end_move:
000077 9349                      			st Y+, POS_X
000078 8338                      			st Y, POS_Y
000079 9508                      			ret
                                 
                                 
                                 go_up:
00007a 3030                      	cpi POS_Y, 0
00007b f009                      	breq boundary_up
00007c c009                      	rjmp do_go_up
                                 	boundary_up:
00007d 3248                      		cpi POS_X, 40
00007e f00a                      		brmi up_from_top
00007f c003                      		rjmp up_from_bottom
                                 
                                 	up_from_top:
000080 e036                      		ldi POS_Y, 6
000081 5d48                      		subi POS_X, 216 ; -216 = +40 (offset to change top to down screen)
000082 c005                      		rjmp go_up_end
                                 
                                 	up_from_bottom:
000083 e036                      	 	ldi POS_Y, 6
000084 5248                      		subi POS_X, 40 ; sub offset to change down to top screen
000085 c002                      		rjmp go_up_end
                                 
                                 	do_go_up:
000086 953a                      		dec POS_Y
000087 c000                      		rjmp go_up_end
                                 	go_up_end:
000088 9508                      		ret
                                 
                                 go_down:
000089 3036                      	cpi POS_Y, 6
00008a f009                      	breq boundary_down
00008b c009                      	rjmp do_go_down
                                 
                                 	boundary_down:
00008c 3248                      		cpi POS_X, 40
00008d f00a                      		brmi down_from_top
00008e c003                      		rjmp down_from_bottom
                                 
                                 	down_from_top:
00008f e030                      		ldi POS_Y, 0
000090 5d48                      		subi POS_X, 216 ; -216=+40 (offset to change top to down screen)
000091 c005                      		rjmp go_down_end
                                 
                                 	down_from_bottom:
000092 e030                      	 	ldi POS_Y, 0
000093 5248                      		subi POS_X, 40 ; sub offset to change down to top screen
000094 c002                      		rjmp go_down_end
                                 
                                 	do_go_down:
000095 9533                      		inc POS_Y
000096 c000                      		rjmp go_down_end
                                 	go_down_end:
000097 9508                      		ret
                                 
                                 go_left:
000098 3040                      	cpi POS_X, 0
000099 f019                      	breq boudary_up_left
00009a 3248                      	cpi POS_X, 40
00009b f019                      	breq boudary_down_left
00009c c004                      	rjmp do_go_left
                                 
                                 	boudary_up_left:
00009d e247                      		ldi POS_X, 39
00009e c004                      		rjmp go_left_end
                                 
                                 	boudary_down_left:
00009f e44f                      		ldi POS_X, X_MAX
0000a0 c002                      		rjmp go_left_end	
                                 
                                 	do_go_left:
0000a1 954a                      		dec POS_X
0000a2 c000                      		rjmp go_left_end
                                 	go_left_end:
0000a3 9508                      		ret
                                 
                                 go_right:
0000a4 3247                      	cpi POS_X, 39
0000a5 f019                      	breq boudary_up_right
0000a6 344f                      	cpi POS_X, X_MAX
0000a7 f019                      	breq boudary_down_right
0000a8 c004                      	rjmp do_go_right
                                 
                                 	boudary_up_right:
0000a9 e040                      		ldi POS_X, 0
0000aa cff8                      		rjmp go_left_end
                                 
                                 	boudary_down_right:
0000ab e248                      		ldi POS_X, 40
0000ac cff6                      		rjmp go_left_end	
                                 
                                 	do_go_right:
0000ad 9543                      		inc POS_X
0000ae c000                      		rjmp go_right_end
                                 
                                 	go_right_end:
                                 .include "Display.inc"
0000af 9508                      
                                  * Display.inc
                                  *
                                  *  Created: 5/19/2018 2:09:20 PM
                                  *   Author: Vador
                                  */ 
                                 
                                  display:
0000b0 e0b1                      	ldi XH, HIGH(HEADXADDR)
0000b1 e0a0                      	ldi XL, LOW(HEADXADDR)
                                 	; plot the snake
0000b2 2f17                      	mov COUNTER_POS, LENGTH
                                 	for_display:
0000b3 3010                      		cpi COUNTER_POS, 0
0000b4 f049                      		breq display_end
0000b5 931f                      		push COUNTER_POS ; also used in plot_posX,Y
0000b6 914d                      		ld POS_X, X+
0000b7 d00e                      		rcall plot_posX
0000b8 913d                      		ld POS_Y, X+
0000b9 d017                      		rcall plot_posY
0000ba d02a                      		rcall enableLatch
0000bb 911f                      		pop COUNTER_POS ; recover from RAM
0000bc 951a                      		dec COUNTER_POS
0000bd cff5                      		rjmp for_display
                                 	display_end:
                                 		; plot the fruit and return
0000be 9140 0200                 		lds POS_X, FRUITXADDR
0000c0 d005                      		rcall plot_posX
0000c1 9130 0201                 		lds POS_Y, FRUITYADDR
0000c3 d00d                      		rcall plot_posY
0000c4 d020                      		rcall enableLatch
0000c5 9508                      		ret
                                 
                                 plot_posX:
0000c6 e41f                      	ldi COUNTER_POS, X_MAX
                                 	; to make 80 - POS, do the 3 following lines
                                 /*	subi POS, 80 ; X_MAX + 1
                                 	ldi R17, 0b1111_1111 ; xor with 1111_1111 reverse the bits
                                 	eor POS, R17 ; it is done to take into account the fact that the first bit written are the last in the screen*/
                                 	comparePosX:
0000c7 1741                      		cp POS_X, COUNTER_POS
0000c8 f029                      		breq foundPosX
0000c9 d013                      		rcall write_0
                                 	checkEndPlotX:
0000ca 3010                      		cpi COUNTER_POS, 0
0000cb f021                      		breq endPlotX
0000cc 951a                      		dec COUNTER_POS
0000cd cff9                      		rjmp comparePosX
                                 	foundPosX:
0000ce d012                      		rcall write_1
0000cf cffa                      		rjmp checkEndPlotX
                                 	endPlotX:
0000d0 9508                      		ret
                                 
                                 plot_posY:
0000d1 e016                      	ldi COUNTER_POS, Y_MAX
                                 /*	subi POS, 7 ; Y_MAX + 1
                                 	ldi R17, 0b1111_1111 ; xor with 1111_1111 reverse the bits
                                 	eor POS, R17 ; it is done to take into account the fact that the first bit written are the last in the screen*/
0000d2 d00a                      	rcall write_0 ; to complete the register of rows
                                 	comparePosY:
0000d3 1731                      		cp POS_Y, COUNTER_POS
0000d4 f029                      		breq foundPosY
0000d5 d007                      		rcall write_0
                                 	checkEndPlotY:
0000d6 3010                      		cpi COUNTER_POS, 0
0000d7 f021                      		breq endPlotY
0000d8 951a                      		dec COUNTER_POS
0000d9 cff9                      		rjmp comparePosY
                                 	foundPosY:
0000da d006                      		rcall write_1
0000db cffa                      		rjmp checkEndPlotY
                                 	endPlotY:
0000dc 9508                      		ret
                                 
                                 
                                 write_0:
                                 	; will write a 0 on the shift register (8 bit register)
                                 	; to do that: 
                                 	; 1- generate your bit with PB3
                                 	; 2- generate a clock rising/falling edge with PB5
0000dd 982b                      	cbi PORTB,3
0000de 9a2d                      	sbi PORTB,5
0000df 982d                      	cbi PORTB,5
0000e0 9508                      	ret
                                 
                                 write_1:
                                 	; will write a 1 on the shift register (8 bit register)
                                 	; to do that: 
                                 	; 1- generate your bit with PB3
                                 	; 2- generate a clock rising/falling edge with PB5
0000e1 9a2b                      	sbi PORTB,3
0000e2 9a2d                      	sbi PORTB,5
0000e3 982d                      	cbi PORTB,5
0000e4 9508                      	ret
                                 
                                 enableLatch:
                                 	; will enable the output of the shift register
                                 	; by setting then clearing PB4
0000e5 9a2c                      	sbi PORTB,4
0000e6 d002                      	rcall wait
0000e7 982c                      	cbi PORTB,4
0000e8 9508                      	ret
                                 
                                 wait:
0000e9 9aa8                      	sbi TIFR0, TOV0 ; set interrupt bit to 1
                                 	loop_wait:
0000ea 9ba8                      		sbis TIFR0, TOV0
0000eb cffe                      		rjmp loop_wait
0000ec 9508                      	ret
                                 
                                 /*wait:
                                 	in R16,TIFR0 ; read interrupt flag
                                 	bst R16,0 ; copy bit 0 (TOV) in T flag
                                 	brtc wait
                                 	out TIFR0, R16
                                 	ldi R16,COUNTER_OFFSET 
                                 	out TCNT0,R16 ; set counter init
                                 	ret */
                                 
                                  displayScore:
0000ed 9508                      	ret
                                 
                                 displayGameOver:
                                 	; enable columns of row 1
0000ee e090                      	ldi SYMBOL, 0b0000_0000
0000ef d12c                      	rcall write_symbol
0000f0 e090                      	ldi SYMBOL, 0b0000_0000
0000f1 d12a                      	rcall write_symbol
0000f2 e19e                      	ldi SYMBOL, 0b0001_1110
0000f3 d128                      	rcall write_symbol
0000f4 e19f                      	ldi SYMBOL, 0b0001_1111
0000f5 d126                      	rcall write_symbol
0000f6 e191                      	ldi SYMBOL, 0b0001_0001
0000f7 d124                      	rcall write_symbol
0000f8 e09e                      	ldi SYMBOL, 0b0000_1110
0000f9 d122                      	rcall write_symbol
0000fa e090                      	ldi SYMBOL, 0b0000_0000
0000fb d120                      	rcall write_symbol
0000fc e090                      	ldi SYMBOL, 0b0000_0000
0000fd d11e                      	rcall write_symbol
0000fe e090                      	ldi SYMBOL, 0b0000_0000
0000ff d11c                      	rcall write_symbol
000100 e090                      	ldi SYMBOL, 0b0000_0000
000101 d11a                      	rcall write_symbol
000102 e19f                      	ldi SYMBOL, 0b0001_1111
000103 d118                      	rcall write_symbol
000104 e191                      	ldi SYMBOL, 0b0001_0001
000105 d116                      	rcall write_symbol
000106 e09e                      	ldi SYMBOL, 0b0000_1110
000107 d114                      	rcall write_symbol
000108 e19f                      	ldi SYMBOL, 0b0001_1111
000109 d112                      	rcall write_symbol
00010a e090                      	ldi SYMBOL, 0b0000_0000
00010b d110                      	rcall write_symbol
00010c e090                      	ldi SYMBOL, 0b0000_0000
00010d d10e                      	rcall write_symbol
                                 	; enable row 1
00010e d0ce                      	rcall enable_row_1
00010f dfd5                      	rcall enableLatch
                                 
                                 	; enable columns of row 2
000110 e090                      	ldi SYMBOL, 0b0000_0000
000111 d10a                      	rcall write_symbol
000112 e090                      	ldi SYMBOL, 0b0000_0000
000113 d108                      	rcall write_symbol
000114 e191                      	ldi SYMBOL, 0b0001_0001
000115 d106                      	rcall write_symbol
000116 e190                      	ldi SYMBOL, 0b0001_0000
000117 d104                      	rcall write_symbol
000118 e191                      	ldi SYMBOL, 0b0001_0001
000119 d102                      	rcall write_symbol
00011a e191                      	ldi SYMBOL, 0b0001_0001
00011b d100                      	rcall write_symbol
00011c e090                      	ldi SYMBOL, 0b0000_0000
00011d d0fe                      	rcall write_symbol
00011e e090                      	ldi SYMBOL, 0b0000_0000
00011f d0fc                      	rcall write_symbol
000120 e090                      	ldi SYMBOL, 0b0000_0000
000121 d0fa                      	rcall write_symbol
000122 e090                      	ldi SYMBOL, 0b0000_0000
000123 d0f8                      	rcall write_symbol
000124 e190                      	ldi SYMBOL, 0b0001_0000
000125 d0f6                      	rcall write_symbol
000126 e19b                      	ldi SYMBOL, 0b0001_1011
000127 d0f4                      	rcall write_symbol
000128 e191                      	ldi SYMBOL, 0b0001_0001
000129 d0f2                      	rcall write_symbol
00012a e190                      	ldi SYMBOL, 0b0001_0000
00012b d0f0                      	rcall write_symbol
00012c e090                      	ldi SYMBOL, 0b0000_0000
00012d d0ee                      	rcall write_symbol
00012e e090                      	ldi SYMBOL, 0b0000_0000
00012f d0ec                      	rcall write_symbol
                                 	; enable row 2
000130 d0b5                      	rcall enable_row_2
000131 dfb3                      	rcall enableLatch
                                 
                                 	; enable columns of row 3
000132 e090                      	ldi SYMBOL, 0b0000_0000
000133 d0e8                      	rcall write_symbol
000134 e090                      	ldi SYMBOL, 0b0000_0000
000135 d0e6                      	rcall write_symbol
000136 e191                      	ldi SYMBOL, 0b0001_0001
000137 d0e4                      	rcall write_symbol
000138 e190                      	ldi SYMBOL, 0b0001_0000
000139 d0e2                      	rcall write_symbol
00013a e191                      	ldi SYMBOL, 0b0001_0001
00013b d0e0                      	rcall write_symbol
00013c e191                      	ldi SYMBOL, 0b0001_0001
00013d d0de                      	rcall write_symbol
00013e e090                      	ldi SYMBOL, 0b0000_0000
00013f d0dc                      	rcall write_symbol
000140 e090                      	ldi SYMBOL, 0b0000_0000
000141 d0da                      	rcall write_symbol
000142 e090                      	ldi SYMBOL, 0b0000_0000
000143 d0d8                      	rcall write_symbol
000144 e090                      	ldi SYMBOL, 0b0000_0000
000145 d0d6                      	rcall write_symbol
000146 e190                      	ldi SYMBOL, 0b0001_0000
000147 d0d4                      	rcall write_symbol
000148 e195                      	ldi SYMBOL, 0b0001_0101
000149 d0d2                      	rcall write_symbol
00014a e191                      	ldi SYMBOL, 0b0001_0001
00014b d0d0                      	rcall write_symbol
00014c e190                      	ldi SYMBOL, 0b0001_0000
00014d d0ce                      	rcall write_symbol
00014e e090                      	ldi SYMBOL, 0b0000_0000
00014f d0cc                      	rcall write_symbol
000150 e090                      	ldi SYMBOL, 0b0000_0000
000151 d0ca                      	rcall write_symbol
                                 	; enable row 3
000152 d09c                      	rcall enable_row_3
000153 df91                      	rcall enableLatch
                                 
                                 	; enable columns of row 4
000154 e090                      	ldi SYMBOL, 0b0000_0000
000155 d0c6                      	rcall write_symbol
000156 e090                      	ldi SYMBOL, 0b0000_0000
000157 d0c4                      	rcall write_symbol
000158 e19e                      	ldi SYMBOL, 0b0001_1110
000159 d0c2                      	rcall write_symbol
00015a e19f                      	ldi SYMBOL, 0b0001_1111
00015b d0c0                      	rcall write_symbol
00015c e191                      	ldi SYMBOL, 0b0001_0001
00015d d0be                      	rcall write_symbol
00015e e191                      	ldi SYMBOL, 0b0001_0001
00015f d0bc                      	rcall write_symbol
000160 e090                      	ldi SYMBOL, 0b0000_0000
000161 d0ba                      	rcall write_symbol
000162 e090                      	ldi SYMBOL, 0b0000_0000
000163 d0b8                      	rcall write_symbol
000164 e090                      	ldi SYMBOL, 0b0000_0000
000165 d0b6                      	rcall write_symbol
000166 e090                      	ldi SYMBOL, 0b0000_0000
000167 d0b4                      	rcall write_symbol
000168 e19f                      	ldi SYMBOL, 0b0001_1111
000169 d0b2                      	rcall write_symbol
00016a e191                      	ldi SYMBOL, 0b0001_0001
00016b d0b0                      	rcall write_symbol
00016c e19f                      	ldi SYMBOL, 0b0001_1111
00016d d0ae                      	rcall write_symbol
00016e e193                      	ldi SYMBOL, 0b0001_0011
00016f d0ac                      	rcall write_symbol
000170 e090                      	ldi SYMBOL, 0b0000_0000
000171 d0aa                      	rcall write_symbol
000172 e090                      	ldi SYMBOL, 0b0000_0000
000173 d0a8                      	rcall write_symbol
                                 	; enable row 4
000174 d083                      	rcall enable_row_4
000175 df6f                      	rcall enableLatch
                                 
                                 	; enable columns of row 5
000176 e090                      	ldi SYMBOL, 0b0000_0000
000177 d0a4                      	rcall write_symbol
000178 e090                      	ldi SYMBOL, 0b0000_0000
000179 d0a2                      	rcall write_symbol
00017a e194                      	ldi SYMBOL, 0b0001_0100
00017b d0a0                      	rcall write_symbol
00017c e190                      	ldi SYMBOL, 0b0001_0000
00017d d09e                      	rcall write_symbol
00017e e191                      	ldi SYMBOL, 0b0001_0001
00017f d09c                      	rcall write_symbol
000180 e191                      	ldi SYMBOL, 0b0001_0001
000181 d09a                      	rcall write_symbol
000182 e090                      	ldi SYMBOL, 0b0000_0000
000183 d098                      	rcall write_symbol
000184 e090                      	ldi SYMBOL, 0b0000_0000
000185 d096                      	rcall write_symbol
000186 e090                      	ldi SYMBOL, 0b0000_0000
000187 d094                      	rcall write_symbol
000188 e090                      	ldi SYMBOL, 0b0000_0000
000189 d092                      	rcall write_symbol
00018a e190                      	ldi SYMBOL, 0b0001_0000
00018b d090                      	rcall write_symbol
00018c e191                      	ldi SYMBOL, 0b0001_0001
00018d d08e                      	rcall write_symbol
00018e e191                      	ldi SYMBOL, 0b0001_0001
00018f d08c                      	rcall write_symbol
000190 e191                      	ldi SYMBOL, 0b0001_0001
000191 d08a                      	rcall write_symbol
000192 e090                      	ldi SYMBOL, 0b0000_0000
000193 d088                      	rcall write_symbol
000194 e090                      	ldi SYMBOL, 0b0000_0000
000195 d086                      	rcall write_symbol
                                 	; enable row 5
000196 d06a                      	rcall enable_row_5
000197 df4d                      	rcall enableLatch
                                 
                                 	; enable columns of row 6
000198 e090                      	ldi SYMBOL, 0b0000_0000
000199 d082                      	rcall write_symbol
00019a e090                      	ldi SYMBOL, 0b0000_0000
00019b d080                      	rcall write_symbol
00019c e192                      	ldi SYMBOL, 0b0001_0010
00019d d07e                      	rcall write_symbol
00019e e190                      	ldi SYMBOL, 0b0001_0000
00019f d07c                      	rcall write_symbol
0001a0 e09a                      	ldi SYMBOL, 0b0000_1010
0001a1 d07a                      	rcall write_symbol
0001a2 e191                      	ldi SYMBOL, 0b0001_0001
0001a3 d078                      	rcall write_symbol
0001a4 e090                      	ldi SYMBOL, 0b0000_0000
0001a5 d076                      	rcall write_symbol
0001a6 e090                      	ldi SYMBOL, 0b0000_0000
0001a7 d074                      	rcall write_symbol
0001a8 e090                      	ldi SYMBOL, 0b0000_0000
0001a9 d072                      	rcall write_symbol
0001aa e090                      	ldi SYMBOL, 0b0000_0000
0001ab d070                      	rcall write_symbol
0001ac e190                      	ldi SYMBOL, 0b0001_0000
0001ad d06e                      	rcall write_symbol
0001ae e191                      	ldi SYMBOL, 0b0001_0001
0001af d06c                      	rcall write_symbol
0001b0 e191                      	ldi SYMBOL, 0b0001_0001
0001b1 d06a                      	rcall write_symbol
0001b2 e191                      	ldi SYMBOL, 0b0001_0001
0001b3 d068                      	rcall write_symbol
0001b4 e090                      	ldi SYMBOL, 0b0000_0000
0001b5 d066                      	rcall write_symbol
0001b6 e090                      	ldi SYMBOL, 0b0000_0000
0001b7 d064                      	rcall write_symbol
                                 	; enable row 6
0001b8 d051                      	rcall enable_row_6
0001b9 df2b                      	rcall enableLatch
                                 
                                 	; enable columns of row 7
0001ba e090                      	ldi SYMBOL, 0b0000_0000
0001bb d060                      	rcall write_symbol
0001bc e090                      	ldi SYMBOL, 0b0000_0000
0001bd d05e                      	rcall write_symbol
0001be e191                      	ldi SYMBOL, 0b0001_0001
0001bf d05c                      	rcall write_symbol
0001c0 e19f                      	ldi SYMBOL, 0b0001_1111
0001c1 d05a                      	rcall write_symbol
0001c2 e094                      	ldi SYMBOL, 0b0000_0100
0001c3 d058                      	rcall write_symbol
0001c4 e09e                      	ldi SYMBOL, 0b0000_1110
0001c5 d056                      	rcall write_symbol
0001c6 e090                      	ldi SYMBOL, 0b0000_0000
0001c7 d054                      	rcall write_symbol
0001c8 e090                      	ldi SYMBOL, 0b0000_0000
0001c9 d052                      	rcall write_symbol
0001ca e090                      	ldi SYMBOL, 0b0000_0000
0001cb d050                      	rcall write_symbol
0001cc e090                      	ldi SYMBOL, 0b0000_0000
0001cd d04e                      	rcall write_symbol
0001ce e19f                      	ldi SYMBOL, 0b0001_1111
0001cf d04c                      	rcall write_symbol
0001d0 e191                      	ldi SYMBOL, 0b0001_0001
0001d1 d04a                      	rcall write_symbol
0001d2 e191                      	ldi SYMBOL, 0b0001_0001
0001d3 d048                      	rcall write_symbol
0001d4 e19f                      	ldi SYMBOL, 0b0001_1111
0001d5 d046                      	rcall write_symbol
0001d6 e090                      	ldi SYMBOL, 0b0000_0000
0001d7 d044                      	rcall write_symbol
0001d8 e090                      	ldi SYMBOL, 0b0000_0000
0001d9 d042                      	rcall write_symbol
                                 	; enable row 7
0001da d038                      	rcall enable_row_7
0001db df09                      	rcall enableLatch
0001dc 9508                      	ret
                                 
                                 enable_row_1:
0001dd deff                      	rcall write_0
0001de defe                      	rcall write_0
0001df defd                      	rcall write_0
0001e0 defc                      	rcall write_0
0001e1 defb                      	rcall write_0
0001e2 defa                      	rcall write_0
0001e3 def9                      	rcall write_0
0001e4 defc                      	rcall write_1
0001e5 9508                      	ret
                                 
                                 enable_row_2:
0001e6 def6                      	rcall write_0
0001e7 def5                      	rcall write_0
0001e8 def4                      	rcall write_0
0001e9 def3                      	rcall write_0
0001ea def2                      	rcall write_0
0001eb def1                      	rcall write_0
0001ec def4                      	rcall write_1
0001ed deef                      	rcall write_0
0001ee 9508                      	ret
                                 
                                 enable_row_3:
0001ef deed                      	rcall write_0
0001f0 deec                      	rcall write_0
0001f1 deeb                      	rcall write_0
0001f2 deea                      	rcall write_0
0001f3 dee9                      	rcall write_0
0001f4 deec                      	rcall write_1
0001f5 dee7                      	rcall write_0
0001f6 dee6                      	rcall write_0
0001f7 9508                      	ret
                                 
                                 enable_row_4:
0001f8 dee4                      	rcall write_0
0001f9 dee3                      	rcall write_0
0001fa dee2                      	rcall write_0
0001fb dee1                      	rcall write_0
0001fc dee4                      	rcall write_1
0001fd dedf                      	rcall write_0
0001fe dede                      	rcall write_0
0001ff dedd                      	rcall write_0
000200 9508                      	ret
                                 
                                 enable_row_5:
000201 dedb                      	rcall write_0
000202 deda                      	rcall write_0
000203 ded9                      	rcall write_0
000204 dedc                      	rcall write_1
000205 ded7                      	rcall write_0
000206 ded6                      	rcall write_0
000207 ded5                      	rcall write_0
000208 ded4                      	rcall write_0
000209 9508                      	ret
                                 
                                 enable_row_6:
00020a ded2                      	rcall write_0
00020b ded1                      	rcall write_0
00020c ded4                      	rcall write_1
00020d decf                      	rcall write_0
00020e dece                      	rcall write_0
00020f decd                      	rcall write_0
000210 decc                      	rcall write_0
000211 decb                      	rcall write_0
000212 9508                      	ret
                                 	
                                 enable_row_7:
000213 dec9                      	rcall write_0
000214 decc                      	rcall write_1
000215 dec7                      	rcall write_0
000216 dec6                      	rcall write_0
000217 dec5                      	rcall write_0
000218 dec4                      	rcall write_0
000219 dec3                      	rcall write_0
00021a dec2                      	rcall write_0
00021b 9508                      	ret
                                 
                                 ; all print functions will display a specific character 
                                 ; on one single cell of the matrix led (cell = 7 rows x 5 cols)
                                 
                                 write_symbol:
                                 	; load the value on register SYMBOL and convert it on led symbol
                                 	; ex : if SYMBOL = 0b01000 -> turn on the second led of selected cell 
                                 	symb0:
00021c ff90                      		sbrs SYMBOL,0 ; skip if bit set
00021d c00e                      		rjmp symb0_is_0
                                 		symb0_is_1:
00021e dec2                      			rcall write_1
                                 	symb1:
00021f ff91                      		sbrs SYMBOL,1 ; skip if bit set
000220 c00d                      		rjmp symb1_is_0
                                 		symb1_is_1:
000221 debf                      			rcall write_1
                                 	symb2:
000222 ff92                      		sbrs SYMBOL,2 ; skip if bit set
000223 c00c                      		rjmp symb2_is_0
                                 		symb2_is_1:
000224 debc                      			rcall write_1
                                 	symb3:
000225 ff93                      		sbrs SYMBOL,3 ; skip if bit set
000226 c00b                      		rjmp symb3_is_0
                                 		symb3_is_1:
000227 deb9                      			rcall write_1
                                 	symb4:
000228 ff94                      		sbrs SYMBOL,4 ; skip if bit set
000229 c00a                      		rjmp symb4_is_0
                                 		symb4_is_1:
00022a deb6                      			rcall write_1
00022b c00a                      			rjmp symb_ended
                                 
                                 	symb0_is_0:
00022c deb0                      		rcall write_0
00022d cff1                      		rjmp symb1
                                 
                                 	symb1_is_0:
00022e deae                      		rcall write_0
00022f cff2                      		rjmp symb2
                                 
                                 	symb2_is_0:
000230 deac                      		rcall write_0
000231 cff3                      		rjmp symb3
                                 
                                 	symb3_is_0:
000232 deaa                      		rcall write_0
000233 cff4                      		rjmp symb4
                                 
                                 	symb4_is_0:
000234 dea8                      		rcall write_0
000235 c000                      		rjmp symb_ended
                                 	
                                 	symb_ended:
                                 .include "Rules.inc"
000236 9508                      
                                  * Rules.inc
                                  *
                                  *  Created: 5/19/2018 2:11:17 PM
                                  *   Author: Vador
                                  */ 
                                 
                                 checkRules:
000237 d002                      	rcall deathRules
000238 d019                      	rcall eatRules
000239 9508                      	ret
                                 
                                 deathRules:
                                 	; here POS_X and POS_Y are just registers with different meaning
00023a e0d1                      	ldi YH, HIGH(HEADYADDR)
00023b e0c1                      	ldi YL, LOW(HEADYADDR)
00023c 95c3                      	inc YL ; to jump on body address
00023d 2f67                      	mov COUNTER_MOVE, LENGTH
                                 	for_death:
00023e 9140 0100                 		lds POS_X, HEADXADDR
000240 3061                      		cpi COUNTER_MOVE, 1
000241 f079                      		breq death_ended
000242 9139                      		ld POS_Y, Y+ ; POS_Y contains the X pos of next point
000243 1743                      		cp POS_X, POS_Y
000244 f019                      		breq collision_x
000245 95c3                      		inc YL ; to check next X
000246 956a                      		dec COUNTER_MOVE
000247 cff6                      		rjmp for_death
                                 
                                 		collision_x:
                                 			; check for xy collision
000248 9140 0101                 			lds POS_X, HEADYADDR
00024a 9139                      			ld POS_Y, Y+ ; POS_Y contains the Y pos of body point
00024b 1743                      			cp POS_X, POS_Y
00024c f011                      			breq on_death
00024d 956a                      			dec COUNTER_MOVE
00024e cfef                      			rjmp for_death
                                 
                                 		on_death:
00024f e080                      			ldi GAME_STATE, 0 ; game over
000250 c000                      			rjmp death_ended
                                 
                                 	death_ended:
000251 9508                      	ret
                                 
                                 
                                 eatRules:
                                 	; here POS_X and POS_Y are just registers with different meaning
000252 9140 0100                 	lds POS_X, HEADXADDR
000254 9130 0200                 	lds POS_Y, FRUITXADDR
                                 	; check if matching in x positions
000256 1743                      	cp POS_X, POS_Y
000257 f009                      	breq match_pos_x
000258 c00a                      	rjmp eat_ended
                                 
                                 	match_pos_x:
                                 		; check if matching in y positions
000259 9140 0101                 		lds POS_X, HEADYADDR
00025b 9130 0201                 		lds POS_Y, FRUITYADDR
00025d 1743                      		cp POS_X, POS_Y
00025e f009                      		breq match_pos_xy
00025f c003                      		rjmp eat_ended
                                 
                                 	match_pos_xy:
                                 		; if both x and y pos matched
000260 d00d                      		rcall nextRandomPos
000261 9573                      		inc LENGTH
000262 c000                      		rjmp eat_ended
                                 
                                 	eat_ended:
                                 .include "RandomGen.inc"
000263 9508                      
                                  * RandomGen.inc
                                  *
                                  *  Created: 5/19/2018 2:12:22 PM
                                  *   Author: Vador
                                  */ 
                                 
                                 randomXpos:
                                 	; performs a modulo 80 of the random register
000264 3520                      	cpi RANDOM_POS, 80
000265 f010                      	brlo randXend
000266 5520                      	subi RANDOM_POS, 80
000267 cffc                      	rjmp randomXpos
                                 	randXend:
000268 9508                      		ret
                                 
                                 randomYpos:
                                 	; performs a modulo 7 of the random register
000269 3027                      	cpi RANDOM_POS, 7
00026a f010                      	brlo randYend
00026b 5027                      	subi RANDOM_POS, 7
00026c cffc                      	rjmp randomYpos
                                 	randYend:
00026d 9508                      		ret
                                 
                                 nextRandomPos:
                                 	; pseudo random number generator using Fibonacci
                                 	; random x
00026e 9140 0200                 	lds POS_X, FRUITXADDR
000270 9130 0202                 	lds POS_Y, FRUITXADDR2
000272 934f                      	push POS_X
000273 0f43                      	add POS_X, POS_Y
000274 2f24                      	mov RANDOM_POS, POS_X
000275 914f                      	pop POS_X
000276 dfed                      	rcall randomXpos
000277 9320 0200                 	sts FRUITXADDR, RANDOM_POS
000279 9340 0202                 	sts FRUITXADDR2, POS_X
                                 	
                                 	; random y
00027b 9130 0201                 	lds POS_Y, FRUITYADDR
00027d 9140 0203                 	lds POS_X, FRUITYADDR2
00027f 933f                      	push POS_Y
000280 0f34                      	add POS_Y, POS_X
000281 2f23                      	mov RANDOM_POS, POS_Y
000282 913f                      	pop POS_Y
000283 dfe5                      	rcall randomYpos
000284 9320 0201                 	sts FRUITYADDR, RANDOM_POS
000286 9330 0203                 	sts FRUITYADDR2, POS_Y
000288 9508                      
                                 init:
                                 	; config pins
000289 d02b                      	rcall configDispPin
00028a d025                      	rcall configRowKb
00028b d030                      	rcall configDebugLed
                                 	
                                 	; set all Snake initial conditions 
00028c d035                      	rcall initialConditions
                                 
                                 	; config display timer 
00028d e803                      	ldi R16,COUNTER_OFFSET 
00028e bd06                      	out TCNT0,R16 ; set counter init
00028f e003                      	ldi R16,0b0000_0011 ; set prescaler to 64 (COUNTER_OFFSET = 131 -> f = 2kHz)
000290 bd05                      	out TCCR0B,R16 ; timer is configured with prescaler 
                                 	;(timer begins)
                                 
                                 	; config ISR timer for periodic motion
000291 9478                      	sei ; set the global interrupt flag
000292 e001                      	ldi R16,0b0000_0001 ; register for ISR config
000293 9300 006f                 	sts TIMSK1, R16 ; enable ISR for timer 1
000295 ef09                      	ldi R16, COUNTER_OFFSET_MOVE_H
000296 9300 0085                 	sts TCNT1H,R16
000298 ee06                      	ldi R16, COUNTER_OFFSET_MOVE_L
000299 9300 0084                 	sts TCNT1L,R16 ; set counter init
00029b e005                      	ldi R16,0b0000_0101 ; set prescaler to 1024
00029c 9300 0081                 	sts TCCR1B,R16 ; timer is configured with prescaler 
                                 	;(timer begins)
                                 
00029e c000                      	rjmp main
                                 
                                 main:
00029f dd7b                      	rcall checkKeyboard
0002a0 3080                      	cpi GAME_STATE, 0
0002a1 f019                      	breq game_over
                                 	play:
0002a2 df94                      		rcall checkRules
                                 		;rcall move ;in ISR
0002a3 de0c                      		rcall display
0002a4 cffa                      		rjmp main
                                 
                                 	game_over:
0002a5 de48                      		rcall displayGameOver
0002a6 cff8                      		rjmp main
0002a7 cff7                      	rjmp main
                                 
                                 
                                 ISRmove:
                                 	;cbi PORTC,2 ; switch led 2
0002a8 dda2                      	rcall move
0002a9 ef09                      	ldi R16, COUNTER_OFFSET_MOVE_H
0002aa 9300 0085                 	sts TCNT1H,R16
0002ac ee06                      	ldi R16, COUNTER_OFFSET_MOVE_L
0002ad 9300 0084                 	sts TCNT1L,R16
0002af 9518                      	reti
                                 
                                 
                                 configRowKb:
0002b0 ef00                      	ldi R16, 0b1111_0000 ; 4 row output mode, 4 col input mode
0002b1 b90a                      	out DDRD, R16
0002b2 e00f                      	ldi R16, 0b0000_1111 ; rows -> low, cols -> enable pull up resistors
0002b3 b90b                      	out PORTD, R16
0002b4 9508                      	ret
                                 
                                 configDispPin:
0002b5 9a23                      	sbi DDRB,3
0002b6 982b                      	cbi PORTB,3
0002b7 9a24                      	sbi DDRB,4
0002b8 982c                      	cbi PORTB,4
0002b9 9a25                      	sbi DDRB,5
0002ba 982d                      	cbi PORTB,5
0002bb 9508                      	ret
                                 
                                 configDebugLed:
0002bc 9a21                      	sbi DDRB,1 ; buzzer configured as output
0002bd 9a3a                      	sbi DDRC,2
0002be 9a3b                      	sbi DDRC,3
0002bf 9a42                      	sbi PORTC,2
0002c0 9a43                      	sbi PORTC,3
0002c1 9508                      	ret
                                 
                                 initialConditions:
                                 	; initial game state
0002c2 e082                      	ldi GAME_STATE, 2 ; play 
                                 	; initial length
0002c3 e073                      	ldi LENGTH, INIT_LENGTH
                                 
                                 	; head position initial
0002c4 e344                      	ldi POS_X, 52
0002c5 e032                      	ldi POS_Y, 2
0002c6 9340 0100                 	sts HEADXADDR, POS_X 
0002c8 9330 0101                 	sts HEADYADDR, POS_Y
                                 
                                 	; head position initial
0002ca e343                      	ldi POS_X, 51
0002cb e032                      	ldi POS_Y, 2
0002cc 9340 0102                 	sts 0x0102, POS_X
0002ce 9330 0103                 	sts 0x0103, POS_Y
                                 
                                 	; head position initial
0002d0 e342                      	ldi POS_X, 50
0002d1 e032                      	ldi POS_Y, 2
0002d2 9340 0104                 	sts 0x0104, POS_X
0002d4 9330 0105                 	sts 0x0105, POS_Y
                                 
                                 	; fruit position initial
0002d6 e14e                      	ldi POS_X, 30
0002d7 e032                      	ldi POS_Y, 2
0002d8 9340 0202                 	sts FRUITXADDR2, POS_X
0002da 9330 0203                 	sts FRUITYADDR2, POS_Y
                                 
                                 	; initial direction -> none
0002dc e051                      	ldi V, 0b0000_0001


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   2 y  :   8 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  20 r17:  13 r18:  12 r19:  40 r20:  48 
r21:   9 r22:  10 r23:  12 r24:   3 r25: 117 r26:   1 r27:   1 r28:   6 
r29:   3 r30:   0 r31:   0 
Registers used: 16 out of 35 (45.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   4 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  23 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   2 
brne  :   0 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  13 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   0 
cpi   :  21 cpse  :   0 dec   :   9 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   5 jmp   :   0 
ld    :   6 ldd   :   0 ldi   : 156 lds   :  14 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   6 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   0 ori   :   0 out   :   4 pop   :   6 
push  :   6 rcall : 225 ret   :  33 reti  :   1 rjmp  :  68 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  19 sbic  :   0 sbis  :   7 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :  20 
sub   :   0 subi  :   7 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 28 out of 113 (24.8%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005bc   1418      0   1418   32768   4.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings


AVRASM ver. 2.2.7  C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\randomGenerator\main.asm Sun May 20 14:44:56 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\randomGenerator\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\randomGenerator\main.asm(22): warning: Register r30 already defined by the .DEF directive
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\randomGenerator\main.asm(23): warning: Register r31 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Vador\Documents\Atmel Studio\7.0\SnakeRAM\randomGenerator\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Snake.asm
                                 ;
                                 ; Created: 4/22/2018 12:09:48 PM
                                 ; Author : Vador
                                 ;
                                 
                                 ; include definition file of ATmega328P
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; define registers
                                 .def KB_REG = R17
                                 .def SEL_COL = R18
                                 .def SEL_ROW = R19
                                 .def SEL_KEY = R20
                                 .def COUNTER_POS = R21
                                 .def RANDOM_POS = R22
                                 .def POS_Y = R23
                                 .def POS_X = R24
                                 .def V = R25 ; 4bits + Vx_Vy
                                 ; R26 -> R29 used as pointers X and Y
                                 .def COUNTER_MOVE = R30
                                 .def LENGTH = R31
                                 
                                 ; define constants
                                 .equ COUNTER_OFFSET = 131
                                 .equ COUNTER_OFFSET_MOVE_L = 0xE6
                                 .equ COUNTER_OFFSET_MOVE_H = 0xF9
                                 ; define map size
                                 .equ X_MAX = 79
                                 .equ Y_MAX = 6
                                 ; define max length
                                 .equ LENGTH_MAX = 16
                                 ; define head SRAM addresses
                                 .equ HEADXADDR = 0x0100
                                 .equ HEADYADDR = 0x0101
                                 ; define fruit SRAM addresses
                                 .equ FRUITXADDR = 0x0200
                                 .equ FRUITYADDR = 0x0201
                                 ; define past fruit SRAM addresses
                                 .equ FRUITXADDR2 = 0x0202
                                 .equ FRUITYADDR2 = 0x0203
                                 ; define each keyboard input
                                 .equ K7 = 0b1000_1000
                                 .equ K8 = 0b1000_0100
                                 .equ K9 = 0b1000_0010
                                 .equ KF = 0b1000_0001
                                 
                                 .equ K4 = 0b0100_1000
                                 .equ K5 = 0b0100_0100
                                 .equ K6 = 0b0100_0010
                                 .equ KE = 0b0100_0001
                                 
                                 .equ K1 = 0b0010_1000
                                 .equ K2 = 0b0010_0100
                                 .equ K3 = 0b0010_0010
                                 .equ KD = 0b0010_0001
                                 
                                 .equ KA = 0b0001_1000
                                 .equ K0 = 0b0001_0100
                                 .equ KB = 0b0001_0010
                                 .equ KC = 0b0001_0001
                                 
                                 .equ NO_K = 0b0000_0000
                                 
                                 ; begin program
                                 .org 0x0000
000000 c01a                      	rjmp init
                                 .org 0x001A
00001a c13e                      	rjmp ISR
                                 
                                 init:
                                 	; config pins
00001b 9a23                      	sbi DDRB,3
00001c 982b                      	cbi PORTB,3
00001d 9a24                      	sbi DDRB,4
00001e 982c                      	cbi PORTB,4
00001f 9a25                      	sbi DDRB,5
000020 982d                      	cbi PORTB,5
                                 
                                 	; led for debugging	
000021 9a21                      	sbi DDRB,1 ; buzzer configured as output
000022 9a3a                      	sbi DDRC,2
000023 9a3b                      	sbi DDRC,3
000024 9a42                      	sbi PORTC,2
000025 9a43                      	sbi PORTC,3
                                 
000026 e0f5                      	ldi LENGTH, 5
                                 
                                 	; head position initial
000027 e384                      	ldi POS_X, 52
000028 e072                      	ldi POS_Y, 2
000029 9380 0100                 	sts HEADXADDR, POS_X
00002b 9370 0101                 	sts HEADYADDR, POS_Y
                                 
                                 	; fruit position initial
00002d e18e                      	ldi POS_X, 30
00002e e072                      	ldi POS_Y, 2
00002f 9380 0202                 	sts FRUITXADDR2, POS_X
000031 9370 0203                 	sts FRUITYADDR2, POS_Y
                                 
000033 e090                      	ldi V, 0b0000_0000 ; left Vx, Vy - righth
                                 
                                 	; config display timer 
000034 e803                      	ldi R16,COUNTER_OFFSET 
000035 bd06                      	out TCNT0,R16 ; set counter init
000036 e003                      	ldi R16,0b0000_0011 ; set prescaler to 64 (COUNTER_OFFSET = 131 -> f = 2kHz)
000037 bd05                      	out TCCR0B,R16 ; timer is configured with prescaler 
                                 	;(timer begins)
                                 
                                 	; config ISR timer for periodic motion
000038 9478                      	sei ; set the global interrupt flag
000039 e001                      	ldi R16,0b0000_0001 ; register for ISR config
00003a 9300 006f                 	sts TIMSK1, R16 ; enable ISR for timer 1
00003c ef09                      	ldi R16, COUNTER_OFFSET_MOVE_H
00003d 9300 0085                 	sts TCNT1H,R16
00003f ee06                      	ldi R16, COUNTER_OFFSET_MOVE_L
000040 9300 0084                 	sts TCNT1L,R16 ; set counter init
000042 e005                      	ldi R16,0b0000_0101 ; set prescaler to 1024
000043 9300 0081                 	sts TCCR1B,R16 ; timer is configured with prescaler 
                                 	;(timer begins)
                                 
000045 c000                      	rjmp main
                                 
                                 main:
                                 	; breq gameState, GAMEOVER
                                 	; print GAME OVER
000046 d11a                      	rcall checkRules
000047 d0a4                      	rcall updateDir
                                 	;rcall move ;in ISR
000048 d030                      	rcall display
000049 cffc                      	rjmp main
                                 
                                 move:
00004a e0d1                      	ldi YH, HIGH(HEADXADDR)
00004b e0c0                      	ldi YL, LOW(HEADXADDR)
00004c 93ff                      	push LENGTH
00004d 0fff                      	add LENGTH, LENGTH
00004e 50f2                      	subi LENGTH, 2
00004f 0fcf                      	add YL, LENGTH
000050 91ff                      	pop LENGTH
000051 2fef                      	mov COUNTER_MOVE, LENGTH
                                 	for_move:
000052 30e1                      		cpi COUNTER_MOVE, 1
000053 f031                      		breq do_move
000054 917a                      		ld POS_Y, -Y
000055 937f                      		push POS_Y
000056 918a                      		ld POS_X, -Y
000057 938f                      		push POS_X
000058 95ea                      		dec COUNTER_MOVE
000059 cff8                      		rjmp for_move
                                 
                                 	do_move:
00005a 3091                      		cpi V, 0b0000_0001
00005b f039                      			breq move_right
00005c 3098                      		cpi V, 0b0000_1000
00005d f039                      			breq move_left
00005e 3092                      		cpi V, 0b0000_0010
00005f f049                      			breq move_down
000060 3094                      		cpi V, 0b0000_0100
000061 f029                      			breq move_up
                                 
000062 c008                      		rjmp end_move
                                 
                                 		move_right:
000063 d055                      			rcall go_right
000064 c006                      			rjmp end_move
                                 		move_left:
000065 d047                      			rcall go_left
000066 c004                      			rjmp end_move
                                 		move_up:
000067 d027                      			rcall go_up
000068 c002                      			rjmp end_move
                                 		move_down:
000069 d034                      			rcall go_down
00006a c000                      			rjmp end_move
                                 		end_move:
00006b e0d1                      			ldi YH, HIGH(HEADXADDR)
00006c e0c0                      			ldi YL, LOW(HEADXADDR)
00006d 2fef                      			mov COUNTER_MOVE, LENGTH
                                 			for_end_move:
00006e 30e1                      				cpi COUNTER_MOVE, 1
00006f f031                      				breq do_end_move
000070 9389                      				st Y+, POS_X
000071 9379                      				st Y+, POS_Y
000072 918f                      				pop POS_X
000073 917f                      				pop POS_Y
000074 95ea                      				dec COUNTER_MOVE
000075 cff8                      				rjmp for_end_move
                                 		do_end_move:
000076 9389                      			st Y+, POS_X
000077 8378                      			st Y, POS_Y
000078 9508                      			ret
                                 	
                                 
                                 display:
000079 e0b1                      	ldi XH, HIGH(HEADXADDR)
00007a e0a0                      	ldi XL, LOW(HEADXADDR)
                                 	; plot the snake
00007b 2f5f                      	mov COUNTER_POS, LENGTH
                                 	for_display:
00007c 3050                      		cpi COUNTER_POS, 0
00007d f049                      		breq display_end
00007e 935f                      		push COUNTER_POS ; also used in plot_posX,Y
00007f 918d                      		ld POS_X, X+
000080 d044                      		rcall plot_posX
000081 917d                      		ld POS_Y, X+
000082 d04d                      		rcall plot_posY
000083 d060                      		rcall enableLatch
000084 915f                      		pop COUNTER_POS ; recover from RAM
000085 955a                      		dec COUNTER_POS
000086 cff5                      		rjmp for_display
                                 	display_end:
                                 		; plot the fruit and return
000087 9180 0200                 		lds POS_X, FRUITXADDR
000089 d03b                      		rcall plot_posX
00008a 9170 0201                 		lds POS_Y, FRUITYADDR
00008c d043                      		rcall plot_posY
00008d d056                      		rcall enableLatch
00008e 9508                      		ret
                                 
                                 /*
                                 #################
                                 MOVING FUNCTIONS
                                 #################
                                 */
                                 
                                 go_up:
00008f 3070                      	cpi POS_Y, 0
000090 f009                      	breq boundary_up
000091 c009                      	rjmp do_go_up
                                 	boundary_up:
000092 3288                      		cpi POS_X, 40
000093 f00a                      		brmi up_from_top
000094 c003                      		rjmp up_from_bottom
                                 
                                 	up_from_top:
000095 e076                      		ldi POS_Y, 6
000096 5d88                      		subi POS_X, 216 ; -216 = +40
000097 c005                      		rjmp go_up_end
                                 
                                 	up_from_bottom:
000098 e076                      	 	ldi POS_Y, 6
000099 5288                      		subi POS_X, 40 ; sub offset to change down to top screen
00009a c002                      		rjmp go_up_end
                                 
                                 	do_go_up:
00009b 957a                      		dec POS_Y
00009c c000                      		rjmp go_up_end
                                 	go_up_end:
00009d 9508                      		ret
                                 
                                 go_down:
00009e 3076                      	cpi POS_Y, 6
00009f f009                      	breq boundary_down
0000a0 c009                      	rjmp do_go_down
                                 
                                 	boundary_down:
0000a1 3288                      		cpi POS_X, 40
0000a2 f00a                      		brmi down_from_top
0000a3 c003                      		rjmp down_from_bottom
                                 
                                 	down_from_top:
0000a4 e070                      		ldi POS_Y, 0
0000a5 5d88                      		subi POS_X, 216 ; -216=+40 add offset to change top to down screen
0000a6 c005                      		rjmp go_down_end
                                 
                                 	down_from_bottom:
0000a7 e070                      	 	ldi POS_Y, 0
0000a8 5288                      		subi POS_X, 40 ; sub offset to change down to top screen
0000a9 c002                      		rjmp go_down_end
                                 
                                 	do_go_down:
0000aa 9573                      		inc POS_Y
0000ab c000                      		rjmp go_down_end
                                 	go_down_end:
0000ac 9508                      		ret
                                 
                                 go_left:
0000ad 3080                      	cpi POS_X, 0
0000ae f019                      	breq boudary_up_left
0000af 3288                      	cpi POS_X, 40
0000b0 f019                      	breq boudary_down_left
0000b1 c004                      	rjmp do_go_left
                                 
                                 	boudary_up_left:
0000b2 e287                      		ldi POS_X, 39
0000b3 c004                      		rjmp go_left_end
                                 
                                 	boudary_down_left:
0000b4 e48f                      		ldi POS_X, X_MAX
0000b5 c002                      		rjmp go_left_end	
                                 
                                 	do_go_left:
0000b6 958a                      		dec POS_X
0000b7 c000                      		rjmp go_left_end
                                 	go_left_end:
0000b8 9508                      		ret
                                 
                                 go_right:
0000b9 3287                      	cpi POS_X, 39
0000ba f019                      	breq boudary_up_right
0000bb 348f                      	cpi POS_X, X_MAX
0000bc f019                      	breq boudary_down_right
0000bd c004                      	rjmp do_go_right
                                 
                                 	boudary_up_right:
0000be e080                      		ldi POS_X, 0
0000bf cff8                      		rjmp go_left_end
                                 
                                 	boudary_down_right:
0000c0 e288                      		ldi POS_X, 40
0000c1 cff6                      		rjmp go_left_end	
                                 
                                 	do_go_right:
0000c2 9583                      		inc POS_X
0000c3 c000                      		rjmp go_right_end
                                 
                                 	go_right_end:
0000c4 9508                      		ret
                                 
                                 /*
                                 ############################
                                 DISPLAY LED MATRIX FUNCTIONS
                                 ############################
                                 */
                                 
                                 plot_posX:
0000c5 e45f                      	ldi COUNTER_POS, X_MAX
                                 	; to make 80 - POS, do the 3 following lines
                                 /*	subi POS, 80 ; X_MAX + 1
                                 	ldi R17, 0b1111_1111 ; xor with 1111_1111 reverse the bits
                                 	eor POS, R17 ; it is done to take into account the fact that the first bit written are the last in the screen*/
                                 	comparePosX:
0000c6 1785                      		cp POS_X, COUNTER_POS
0000c7 f029                      		breq foundPosX
0000c8 d013                      		rcall write_0
                                 	checkEndPlotX:
0000c9 3050                      		cpi COUNTER_POS, 0
0000ca f021                      		breq endPlotX
0000cb 955a                      		dec COUNTER_POS
0000cc cff9                      		rjmp comparePosX
                                 	foundPosX:
0000cd d012                      		rcall write_1
0000ce cffa                      		rjmp checkEndPlotX
                                 	endPlotX:
0000cf 9508                      		ret
                                 
                                 plot_posY:
0000d0 e056                      	ldi COUNTER_POS, Y_MAX
                                 /*	subi POS, 7 ; Y_MAX + 1
                                 	ldi R17, 0b1111_1111 ; xor with 1111_1111 reverse the bits
                                 	eor POS, R17 ; it is done to take into account the fact that the first bit written are the last in the screen*/
0000d1 d00a                      	rcall write_0 ; to complete the register of rows
                                 	comparePosY:
0000d2 1775                      		cp POS_Y, COUNTER_POS
0000d3 f029                      		breq foundPosY
0000d4 d007                      		rcall write_0
                                 	checkEndPlotY:
0000d5 3050                      		cpi COUNTER_POS, 0
0000d6 f021                      		breq endPlotY
0000d7 955a                      		dec COUNTER_POS
0000d8 cff9                      		rjmp comparePosY
                                 	foundPosY:
0000d9 d006                      		rcall write_1
0000da cffa                      		rjmp checkEndPlotY
                                 	endPlotY:
0000db 9508                      		ret
                                 
                                 
                                 write_0:
                                 	; will write a 0 on the shift register (8 bit register)
                                 	; to do that: 
                                 	; 1- generate your bit with PB3
                                 	; 2- generate a clock rising/falling edge with PB5
0000dc 982b                      	cbi PORTB,3
0000dd 9a2d                      	sbi PORTB,5
0000de 982d                      	cbi PORTB,5
0000df 9508                      	ret
                                 
                                 write_1:
                                 	; will write a 1 on the shift register (8 bit register)
                                 	; to do that: 
                                 	; 1- generate your bit with PB3
                                 	; 2- generate a clock rising/falling edge with PB5
0000e0 9a2b                      	sbi PORTB,3
0000e1 9a2d                      	sbi PORTB,5
0000e2 982d                      	cbi PORTB,5
0000e3 9508                      	ret
                                 
                                 enableLatch:
                                 	; will enable the output of the shift register
                                 	; by setting then clearing PB4
0000e4 9a2c                      	sbi PORTB,4
0000e5 d002                      	rcall wait
0000e6 982c                      	cbi PORTB,4
0000e7 9508                      	ret
                                 
                                 wait:
0000e8 9aa8                      	sbi TIFR0, TOV0 ; set interrupt bit to 1
                                 	loop_wait:
0000e9 9ba8                      		sbis TIFR0, TOV0
0000ea cffe                      		rjmp loop_wait
0000eb 9508                      	ret
                                 
                                 /*wait:
                                 	in R16,TIFR0 ; read interrupt flag
                                 	bst R16,0 ; copy bit 0 (TOV) in T flag
                                 	brtc wait
                                 	out TIFR0, R16
                                 	ldi R16,COUNTER_OFFSET 
                                 	out TCNT0,R16 ; set counter init
                                 	ret */
                                 
                                 
                                 /*
                                 ##########################
                                 KEYBOARD READING FUNCTIONS
                                 ##########################
                                 */
                                 
                                 updateDir:
                                 	; 2 steps keyboard check
0000ec 2744                      	clr SEL_KEY
0000ed d004                      	rcall KBCheck1
0000ee d006                      	rcall KBCheck2
0000ef d036                      	rcall selectKey
0000f0 c038                      	rjmp compareKey
                                 dirUpdated:
0000f1 9508                      	ret
                                 
                                 KBCheck1:
0000f2 d005                      	rcall configRowKb
0000f3 d00e                      	rcall readColKb
0000f4 9508                      	ret
                                 
                                 KBCheck2:
0000f5 d007                      	rcall configColKb
0000f6 d014                      	rcall readRowKb
0000f7 9508                      	ret
                                 	
                                 
                                 configRowKb:
0000f8 ef10                      	ldi KB_REG, 0b1111_0000 ; 4 row output mode, 4 col input mode
0000f9 b91a                      	out DDRD, KB_REG
0000fa e01f                      	ldi KB_REG, 0b0000_1111 ; rows -> low, cols -> enable pull up resistors
0000fb b91b                      	out PORTD, KB_REG
0000fc 9508                      	ret
                                 
                                 configColKb:
0000fd e01f                      	ldi KB_REG, 0b0000_1111 ; 4 col output mode, 4 row input mode
0000fe b91a                      	out DDRD, KB_REG
0000ff e01f                      	ldi KB_REG, 0b0000_1111 ; all cols high, 
000100 b91b                      	out PORTD, KB_REG
000101 9508                      	ret
                                 
                                 readColKb:
000102 b009                      	in R0, PIND ; read Pin state
000103 e01f                      	ldi KB_REG, 0b0000_1111 ; max value of PIND
000104 1910                      	sub KB_REG, R0 ; KB_STATE = 0 if all cols are high
000105 f009                      	breq noKeyPressedCol ; compare KB_STATE (last register used) with 0
000106 c002                      	rjmp keyPressedCol
                                 
                                 	noKeyPressedCol:
000107 e020                      		ldi SEL_COL, 0x00
000108 9508                      		ret
                                 	keyPressedCol:
000109 d00a                      		rcall checkColPressed
00010a 9508                      		ret
                                 
                                 readRowKb:
00010b b009                      	in R0, PIND ; read Pin state
00010c ef10                      	ldi KB_REG, 0b1111_0000 ; max value of PIND
00010d 1910                      	sub KB_REG, R0 ; KB_STATE = 0 if all cols are high
00010e f009                      	breq noKeyPressedRow ; compare KB_STATE (last register used) with 0
00010f c002                      	rjmp keyPressedRow
                                 
                                 	noKeyPressedRow:
000110 e030                      		ldi SEL_ROW, 0x00
000111 9508                      		ret
                                 	keyPressedRow:
000112 d00a                      		rcall checkRowPressed
000113 9508                      		ret
                                 
                                 
                                 checkColPressed:
000114 9b48                      	sbis PIND,0
000115 e021                      	ldi SEL_COL, 0b0000_0001
000116 9b49                      	sbis PIND,1
000117 e022                      	ldi SEL_COL, 0b0000_0010
000118 9b4a                      	sbis PIND,2
000119 e024                      	ldi SEL_COL, 0b0000_0100
00011a 9b4b                      	sbis PIND,3
00011b e028                      	ldi SEL_COL, 0b0000_1000
00011c 9508                      	ret
                                 
                                 checkRowPressed:
00011d 994c                      	sbic PIND,4
00011e e130                      	ldi SEL_ROW, 0b0001_0000
00011f 994d                      	sbic PIND,5
000120 e230                      	ldi SEL_ROW, 0b0010_0000
000121 994e                      	sbic PIND,6
000122 e430                      	ldi SEL_ROW, 0b0100_0000
000123 994f                      	sbic PIND,7
000124 e830                      	ldi SEL_ROW, 0b1000_0000
000125 9508                      	ret
                                 
                                 selectKey:
000126 0f42                      	add SEL_KEY, SEL_COL
000127 0f43                      	add SEL_KEY, SEL_ROW
000128 9508                      	ret
                                 
                                 compareKey:
000129 3040                      	cpi SEL_KEY, NO_K
00012a f051                      		breq NoKpressed
00012b 3144                      	cpi SEL_KEY, K0
00012c f051                      		breq K0pressed
00012d 3242                      	cpi SEL_KEY, K3
00012e f059                      		breq K3pressed
00012f 3142                      	cpi SEL_KEY, KB
000130 f061                      		breq KBpressed
000131 3141                      	cpi SEL_KEY, KC
000132 f069                      		breq KCpressed
000133 3148                      	cpi SEL_KEY, KA
000134 f071                      		breq KApressed
                                 
                                 NoKpressed:
000135 cfbb                      	rjmp dirUpdated
000136 9a43                      	sbi PORTC,3
                                 K0pressed:
000137 e098                      	ldi V, 0b0000_1000 ; set direction to left
000138 9843                      	cbi PORTC,3
000139 cfb7                      	rjmp dirUpdated
                                 K3pressed:
00013a e094                      	ldi V, 0b0000_0100 ; set direction to up
00013b 9843                      	cbi PORTC,3
00013c cfb4                      	rjmp dirUpdated
                                 KBpressed:
00013d e092                      	ldi V, 0b0000_0010 ; set direction to down
00013e 9843                      	cbi PORTC,3
00013f cfb1                      	rjmp dirUpdated
                                 KCpressed:
000140 e091                      	ldi V, 0b0000_0001 ; set direction to right
000141 9843                      	cbi PORTC,3
000142 cfae                      	rjmp dirUpdated
                                 KApressed:
                                 	; begin button
000143 9160 0084                 	lds RANDOM_POS, TCNT1L
000145 d009                      	rcall randomXpos
000146 9360 0200                 	sts FRUITXADDR, RANDOM_POS
000148 9160 0085                 	lds RANDOM_POS, TCNT1H
00014a d009                      	rcall randomYpos
00014b 9360 0201                 	sts FRUITYADDR, RANDOM_POS
00014d e091                      	ldi V, 0b0000_0001 ; start moving
00014e cfa2                      	rjmp dirUpdated
                                 
                                 randomXpos:
                                 	; performs a modulo 80 of the random register
00014f 3560                      	cpi RANDOM_POS, 80
000150 f010                      	brlo randXend
000151 5560                      	subi RANDOM_POS, 80
000152 cffc                      	rjmp randomXpos
                                 	randXend:
000153 9508                      		ret
                                 
                                 randomYpos:
                                 	; performs a modulo 7 of the random register
000154 3067                      	cpi RANDOM_POS, 7
000155 f010                      	brlo randYend
000156 5067                      	subi RANDOM_POS, 7
000157 cffc                      	rjmp randomYpos
                                 	randYend:
000158 9508                      		ret
                                 
                                 
                                 ISR:
                                 	;cbi PORTC,2 ; switch led 2
000159 def0                      	rcall move
00015a ef09                      	ldi R16, COUNTER_OFFSET_MOVE_H
00015b 9300 0085                 	sts TCNT1H,R16
00015d ee06                      	ldi R16, COUNTER_OFFSET_MOVE_L
00015e 9300 0084                 	sts TCNT1L,R16
000160 9518                      	reti
                                 
                                 /*
                                 ############################
                                 RULES OF THE GAME
                                 ############################
                                 */
                                 
                                 checkRules:
000161 d002                      	rcall deathRules
000162 d019                      	rcall eatRules
000163 9508                      	ret
                                 
                                 deathRules:
                                 	; here POS_X and POS_Y are just registers with different meaning
000164 e0d1                      	ldi YH, HIGH(HEADYADDR)
000165 e0c1                      	ldi YL, LOW(HEADYADDR)
000166 95c3                      	inc YL ; to jump on body address
000167 2fef                      	mov COUNTER_MOVE, LENGTH
                                 	for_death:
000168 9180 0100                 		lds POS_X, HEADXADDR
00016a 30e1                      		cpi COUNTER_MOVE, 1
00016b f079                      		breq death_ended
00016c 9179                      		ld POS_Y, Y+ ; POS_Y contains the X pos of next point
00016d 1787                      		cp POS_X, POS_Y
00016e f019                      		breq collision_x
00016f 95c3                      		inc YL ; to check next X
000170 95ea                      		dec COUNTER_MOVE
000171 cff6                      		rjmp for_death
                                 
                                 		collision_x:
                                 			; check for xy collision
000172 9180 0101                 			lds POS_X, HEADYADDR
000174 9179                      			ld POS_Y, Y+ ; POS_Y contains the Y pos of body point
000175 1787                      			cp POS_X, POS_Y
000176 f011                      			breq on_death
000177 95ea                      			dec COUNTER_MOVE
000178 cfef                      			rjmp for_death
                                 
                                 		on_death:
                                 			; print game over
000179 e090                      			ldi V, 0b0000_0000
00017a c000                      			rjmp death_ended
                                 
                                 	death_ended:
00017b 9508                      	ret
                                 
                                 
                                 eatRules:
                                 	; here POS_X and POS_Y are just registers with different meaning
00017c 9180 0100                 	lds POS_X, HEADXADDR
00017e 9170 0200                 	lds POS_Y, FRUITXADDR
                                 	; check if matching in x positions
000180 1787                      	cp POS_X, POS_Y
000181 f009                      	breq match_pos_x
000182 c00a                      	rjmp eat_ended
                                 
                                 	match_pos_x:
                                 		; check if matching in y positions
000183 9180 0101                 		lds POS_X, HEADYADDR
000185 9170 0201                 		lds POS_Y, FRUITYADDR
000187 1787                      		cp POS_X, POS_Y
000188 f009                      		breq match_pos_xy
000189 c003                      		rjmp eat_ended
                                 
                                 	match_pos_xy:
                                 		; if both x and y pos matched
00018a d003                      		rcall nextRandomPos
00018b 95f3                      		inc LENGTH
00018c c000                      		rjmp eat_ended
                                 
                                 	eat_ended:
00018d 9508                      		ret
                                 
                                 nextRandomPos:
                                 	; pseudo random number generator using Fibonacci
                                 	; random x
00018e 9180 0200                 	lds POS_X, FRUITXADDR
000190 9170 0202                 	lds POS_Y, FRUITXADDR2
000192 938f                      	push POS_X
000193 0f87                      	add POS_X, POS_Y
000194 2f68                      	mov RANDOM_POS, POS_X
000195 918f                      	pop POS_X
000196 dfb8                      	rcall randomXpos
000197 9360 0200                 	sts FRUITXADDR, RANDOM_POS
000199 9380 0202                 	sts FRUITXADDR2, POS_X
                                 	
                                 	; random y
00019b 9170 0201                 	lds POS_Y, FRUITYADDR
00019d 9180 0203                 	lds POS_X, FRUITYADDR2
00019f 937f                      	push POS_Y
0001a0 0f78                      	add POS_Y, POS_X
0001a1 2f67                      	mov RANDOM_POS, POS_Y
0001a2 917f                      	pop POS_Y
0001a3 dfb0                      	rcall randomYpos
0001a4 9360 0201                 	sts FRUITYADDR, RANDOM_POS
0001a6 9370 0203                 	sts FRUITYADDR2, POS_Y
0001a8 9508                      	ret
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   2 y  :   8 z  :   0 r0 :   4 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  16 r17:  12 r18:   6 r19:   6 r20:   9 
r21:  13 r22:  12 r23:  36 r24:  44 r25:  11 r26:   1 r27:   1 r28:   6 
r29:   3 r30:  10 r31:  12 
Registers used: 19 out of 35 (54.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   6 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  30 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   2 
brne  :   0 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  11 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   0 
cpi   :  26 cpse  :   0 dec   :   9 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   5 jmp   :   0 
ld    :   6 ldd   :   0 ldi   :  54 lds   :  14 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   6 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   6 pop   :   6 
push  :   6 rcall :  36 ret   :  30 reti  :   1 rjmp  :  52 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  14 sbic  :   4 sbis  :   5 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :  16 
sub   :   2 subi  :   7 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 30 out of 113 (26.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000352    800      0    800   32768   2.4%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
